%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: hw1.dvi
%%CreationDate: Mon Oct  9 14:06:34 2017
%%Pages: 6
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: CMBX12 CMBX10 CMR10
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter hw1.dvi -o hw1.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2017.10.09:1406
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: CMR10
%!PS-AdobeFont-1.0: CMR10 003.002
%%Title: CMR10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 11 /ff put
dup 12 /fi put
dup 13 /fl put
dup 33 /exclam put
dup 34 /quotedblright put
dup 36 /dollar put
dup 38 /ampersand put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 54 /six put
dup 55 /seven put
dup 56 /eight put
dup 57 /nine put
dup 58 /colon put
dup 61 /equal put
dup 63 /question put
dup 65 /A put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 82 /R put
dup 83 /S put
dup 84 /T put
dup 85 /U put
dup 86 /V put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
dup 122 /z put
dup 123 /endash put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E5ADA5E217BE24851180E9A1700FBA66C7D2B0D7BFDE4F4EED1D24B821A40947
5620363657F6D048E651A689822CF815E72FC8AE9D835BE31D1DD8B54C9A717F
4DC319B4B59AE073936EA40B070524C7E71D5A7B64436DA107749746B516E29F
E3BBCB8F8C473E706670E11E5B221716F315FF097CD1841D0069FA69EA1898FF
9F9EC2518C77806A19730C97F54BEAD604548D553D4A6EDB247853225E24E7E9
89D71F6BC94DB986467E755CCC99069B313F5745B02B4BB608A39F0A0A732B87
7EA2DED68219754BF1FBCA350327572D769C962EF9242132D93A5C8E9725D8D3
AAAEC15ED0F362471AA58488620156F3474FA59CA080EA96FE995D2B3DEEADF3
3141D157481C66507725ACA5953CBBE1ACEE7E3F02C72C6552D15EB3D612730E
61A06A43575568DC3CF3844BABF04CA767E299575EF2ECAAC7649193843D694E
6CA59318C01132C361A3E43BE637B70B9966664E12EF4707F6B100BC37778D1C
F1806B1DE081D2C9B995BF1EE3842EFFBB8416161FE31633A6EDA118E563BDC1
C42F403BE8A009FC756406669E34C6A08668808E0C31A589D0720BE32F3181F9
8039645643E15D25917F38DFFD8BD08A420854DE15AF291ED675A634C151193D
29AA6E04E84A598350AF17E71973854842AFEC3EB1B58E4D4433309BF5ED9D86
32C4BD136C89169D45718A88BABE25072D8E552AA4CA3F840ECB11519B06EB44
13026DD6800BFE15E90592641FE99BCD18039598DC7B08AA89EE6792B576B29F
787176E0CE92270D872A5988E8CB83661FE8E8FD331668DDF9A87EA0FCB904E9
FC2B5F090705C9CC49A85453967C697A72F27326FCF642B945A85944A34E460C
7E173819BABE5F350CD7E792B9CAE496423F13BBD49CB9F4E39D27A26395B983
259BA11CECF2AB41FDD22698FC491906217FFC0F76FEB03DEA39BC8396874506
EFC8A06F0F7EA849168C00D81728C739ADEC153F5A13A46FD1263D937A9EA004
743883705AD534722FF109146B997B7696988A9F2B3AC897A10789DA53D2DF61
DAC09D647BE595260BB70C631E70BA8FCA40C0D866A01BDC407520FB95FEB69D
595A4CFF6630777597F5D0BFAA8F6EC32EC5D40D9D2AD3A8995FB0E88F7B4964
F7E1E0FE022796E62FB4B535DD7870A1B2C201223D9FA081AE90555FE51DDF7F
5179A1F2639593D3E310E0260FB4045602F7469B44591028181D8C251722AE3C
50C95BAB0CE9C4D49E716E828DB42DC9DECD925B98CC9178F1C63A39373CCFA7
38DE65020F4E2E1D163DE9EB225CB5C872D9C51AA773850E2199B8D101CE7A7E
C764C34B4A35F4C22A9D23626FB5F2964245B703FA3B4FC41A2DA6A60A74F8BB
E5F8F1D27931C6ECDA857DEF70511CE00732C05471C19ED3B2D164ED411D532C
9578FE0F98FE2AB2EEDC967A35F3FEB011201223A472411DD48296CD6B787673
7903DE67E775664568AA1DE1ADCF6283F8224B48225EEE45458828DC6499F2FD
6C49F144628D0E24FCDE322867D2027B198F10D5474ED83C6D1B5F673289EA6B
12308BE9B80A1BE62FFED9661B23C2EC0E0BC5A2C4C0A98CF7D678D991616947
B49A49AB60259574F16962FD56654EE1CD48D191A7FB823A371CAFF56A1A6F73
8CD08DA0614001C00F5D36BBAA103EA185E43FA4F2FDCA12561356D5645B267D
3EB2DA414FCF70C55D35BCBB8BF813CB9DB27CCAFA130D6EC9900E1FDBF0B765
42B57E2D86A3B4DFA2FF98D118E2513014224085B4BA6D903E3DBF0EF9DD4347
316BA2E508EFB0564AFA65DD8A87C8887795E98D32C976F94487D460185F0694
D0F15976CFF346DEB48A30E93FF8B5326298203CBEBED0B1E0BA9C5C0C49B957
170DFE24CC1B91660D4A48B117D5D4B19467429D32609EF1C4A47AACDACBEDA7
75E1D468BB6EDE702D60DEA3E8767424D15317738826E365EA2E5831E662E3F9
9243D20C227A1245FDA84738BE165A609F79CBF49D51AB8BCCC5EEFFBA7C4640
34283055A466DB744A42B0FD920938E33FBB8DE7F77FCB8A5EA2494C785CFC55
81673751C72BA55FC3D9BC496720D530F2F912E7477BFD5F3B2C23FCEA747662
E1D8BA60B400B92DF30AABD8D5DC53F2AFD5236BE4B869CB61ECDD5E9CD90BB5
9D81AB3958E775C1F5D2A21749E38FCF5FAE64984383F276D1DB5351829CA781
E191A79C17C892AA9D34B3B168FD3B6F7C02C8ED058D2AD734ADD1B9A9D2DFEF
198832CC0DD1F6454DE6CA37731D085C39616674CCDE54F4AC61F328BC029356
A5670FA98EAF74A87B9A92AB35558F8D43799EA9E2373959FF2C00C2C8E4CDE0
FAEB97F772BDCD75FD3D866DE633ED2C36294D506F28AC89BE5C30284355447F
8CC88BD98AF8100CA829AA078DC8AAB00146D5CB3B72C59EE0E738436DAA5EA9
3593F0DF1040D92794233D669F559835208F67704D3169563710EAAD3FFE66EE
ABD30B657DD038027EA3444ECF3408E02B8CBB3FD1E3C5C51CCABB0A87D3C5CB
53AA43B00661C809651E7BD7A3F7B0335268EDC22C09C4EF1B92D60E856833CF
9B1D1B70C1D43CC2A8CA6E2898E1802D61128023A73701573426268DCC620953
0BBB609635BC663D6680172282D6250D5D9A857B752A420EEE69CD64991464B1
2D02B575B37DD1D9B0D42DC4948AFE8326BDBC568E8088D4DDB8E9D189B017C2
193E1FF52FEC7C78C1E48311D0CC6391D45B0A6CD00F9D3B26B2B98DE12F32C6
C4149B45B624E20B67FBEDCB377EBD2B7019795749ACFC81B4AE950B488C1719
C88FE99BCB0D4860995C7BF1976C1B9EC2E7AE546B81A97825C183D7976C326D
7E1D0F6D8C3A1D8CDB44B55353561D7099182BFBA7C83782C6081F9765E539AF
BE0A07FAF68C8D9CB9CEB47BC8DC7B5B91416861A6D901F338FB71E7ABE6EFEB
2A6172CBB0FB50132566DDBD5AAA02520983CC6741DE80B05E6C3D6A98546A7C
777B479A137C9CC6E38D4A97AEA128B37C7279FD4191B1E41720D6F0D00465A2
C93D616618D9CAAECB7C87E680C6BADE9D8DC1909E6538B152CA43312FD4805A
331AEB57E35599FAD0B8A2961AED8FA4A227F600274597A16732F1DCAD80B27F
7D0C7F3BC8C5409DD373CAD1DD3B14B69236DD9A1642EB09B49109257898F10B
B1750115E1F72BA106AB9CC879A5885D70ACDEA77C3A81634324BBD47D57C1B3
D1CCD423718AA4BE5674BBA74186B4A0E9C6C8204B085650327E1A68EA6CC4FD
5FC02206A81426F4919B04ADA061CD3CF1BAA4C04A94F43FFA10D30335BE4848
F7DE03F42980FFC7D49BECC28BCC20DF835CF0A83D7BC991D7FCED7D7831499E
B4B959BE0D648295D198A0EAE563F3BB4A66D61F70B0072BC8768DE3DAF4BF53
0734562E39852A29A915F6E61F90F6379BD4D491740660FFF722FB60FFCA28E8
6C72A3EF8A138EFD24671C2AAB63E6C1D32F479F955A133B7D34EA42A1BCDA40
7B3C74C9250EBFB3365353AEEF2AAA90AC75734075C5C9FC9E74C41F5C62AA8D
0F65B00686B0E8BFE3F4AAE25D9C3A0910BC6092E488A3B87F5B353500C0AC36
5FBE18B3CC209A0CC5BA2045FF6F30D6085AA93D2D21D077C8403C8143CFFD30
F063F003357F52DA59C1BA9764D48EAAC31C0477DE00523E516C3DB6E6B01CFB
06A386178829915146B825FE4D5CC6EE8458FE2232A83DBF1E1881C2772A2716
76E323B2A791A83E9FCCEC67D9CD297B163EB95BFD4A92D6382BAB68B1E42FC8
C305D46B025A832003E5688E20806B1E0EB0B8F08785B73EEDD5493DAEB7FA3D
73DA99A97AD9DA68CE386351D164EBE10516B6CB109BCD72332A948540B97D1A
11735968BD0E06477FA5C77AD683A0CDF3DDF9DD916EAD7976A13E1A8ACDD7A7
70B76DF3E940E26876BB3F5BEEB210E4A527A467EB3915BBD52261569EB17B0F
6BDA59F318584A9796D33103F4FCA302B2133E5A5D0B5019F961273A5E29DF6A
D630FC11004483DFED46E41EC9838CE39156532D57990851CA9D58467BAFD6F4
AD9A83770E3657000BAD005DD57F711A040D3D7CC97870FB186EAF910B0A0107
6C2C1F2689B269E91161F95424190EBDD3A396382B0CDF58AD198053EF4A8C0A
954BEAA33A81A5EED732879545898D59DA579153975549AFFC0CE66E8617400D
051B27D4671B014C85C0DFB2B43B0DE7048649636779347923519B11E37BB6C2
47982ABEFB27A960CC43B181DEA604049DC386682938DB4B6E07167483879743
646B701B42482C2A48822F524ABBE98AAAEDFAB1C00B40196858AB0DE8DC472D
1191901304B15AD0EE028E0C403975A80F264F89AB3CB216A5C27D6F1FDFE8B4
C0D4B64A6799C8441E1BF040C0A55624841EF013DF05D2AE48BE88E0E16B8E3D
18B46CD345A0B3BCD6478ED6E4175616BD1100875A7205D7EF9187352282BB0D
FB808528FC6D8FD27334E31E8BAEF47914EB0D139FD0AC116C6E4A7C61454F45
7201AD3F671582D32A2712533789A77B21A4B5B8D5E2EAA4CE2E717EF8554F99
6C7A656545696CAC8042136E9981D804E252E05E49679E6CF1E3FBE5F331FFDC
9750829A133D75A72E26C987F09AF3CF41808E08333076CF897B31CA94A23132
FC045F9D0803A865DE5DBC661FD4DCE55956FA28B3CAB15E072F4D80E6FA1492
BDE59F46CA026F44DCB651312243725685D53509FAD9E948A04FD067580D9DCE
3A5D7313A5A677CCCFE2DB4272AF76B95022AB5C93F84DED32702DE6878CD8EC
FFDB927BF70075C922BB0E85C1503FF6B4B88410EDB405F89C5327518B9AD76D
D3C3F9CF755E3B61DF2D9BA3902445F269DB3489F8963D45A7BAE0CBF6C4F149
AA65343193F93D025305118FE2E3A2BA56D5EB19C987C26EE6D601207C6DCEE7
0208D1C37CB23E702FD3D8160066987D1F1012DD67DB86D2B00F14A857C6198C
3F1BD985535C58523CD6BB397DB7D2E7BBD8592B8B420B336303B38E114DFEB0
4431DCD86F322DF75A1A839502CE0A85C2850191FAD6349611ECEDDED9FAFE4D
1DD723705499CC224AB24FF0B278CF7D259DAF5FBFB5DAA7CA56A28A99D09DCB
D7E32C0027A5A21F9C139DC715445893B54729A788C762262751CAF8B002EBF9
DFC8C9093A07D4C84DBC92AE22FA46C7687CCCCCB2A6A151A8FC13454150FF9F
4296940872F6C8ADD83583664AEFE0C59EDAC8A55CE8D68AA15CB0A379E6B9A8
2F6BE09E264010D95D74835B5BEFCF05DCE1221933847B5E7A115C9F4C9E8FE0
3C98699AEC9589A0D23BA5678F73B4DAB0C546942F887B023FA2B649DD1D242F
AFB7D2DB31CE40B7477B87FAC72586BD2123E9740CEBBBBE4ABC23A69422B58B
54A2591DC15C2AFC4524B23222C4B0B6ECD515EC314C7493E8924708EFB767FC
BFCB774C4260FFCD520E8F235D28B4CB9D7E63E2519269C52A992F787DE2FE6E
C6DC6972096C363FE08F60DF04195BDD35A441D7569E02D2A319B1C86B31B030
585A2EE4B83E44BDAD82DEFF08650A776E288BEED7018AFABDB540D1EEAEF029
162A890D0A1DD9B9DF27ED6A8E4EF19E51C30A66A12FABDFC53046BC7F47EC9C
9F67DBB2D78ED8A3F6B00E7F2A66D8713882B25828F2813940454D5DCA40BA04
7D2BD856D6DAFEF41CECC3D03FE7FA87BC8492594FC6D49AE37B595E4E079ACD
20AEAA5C1C1A14803C5AE91ABB7E47A655B817FBAED7BB9A3D98D255FC6EFC9A
AF8206E4383DDAF27C3582F2001154960EA8CB98AD4728DEA2DA18BA9B101FE3
99E8E54601A2C0759F674D89EE8DA5E5F2DA8EB5C0A787F65BE96CC64279F0E6
36A664ADE581A7BF577353704D1E3EF5D85AE61E6AFAD615E95CE23EB65EDEFE
B42482B3907803054AA7BF2B9D60786A0334708920BD5A4E1E86719938729986
6DB7C98CD1B41C38AC47B347BB4674D5087E055B01A5B16EBF291FAADE7D31C9
0B6BB3D3AF33C8BE25A4898865AF910D9C3EA8BEEE24F5DE8442FF13EBBDA00D
E5F76F0FEC9343C8E2A0C0D2676CAF3E62A40A477726E7381EA94F0D2DE8BC2C
688FFA3B8CF72764E55BDC40B1FF3265B2802DEED32056E2E74DD2C500C25CF4
AE2308C623374D567CE38913CC79B5F3036D75DEFE3D81E13D68E013FEAC99DD
708DB6514A249466B47905D72ECCF8A23238828789EF04428E8D036315E649F6
64BBEA3672DA04F4CF023B793D520AFDD2E79081D4D6C815D698A0A8C0BC4AD5
4C8C893AFF8B6748410A98594DE999B9BDF328EB51D0EAD962B469E1F8E40819
A39351B4A333BD2260DB6961C47D411F29DD634D95D4257CDBD76E28A8F387DB
D0CAAEAEF47A9ECC128C7F3EAF8CFEF5ECEC376E419D0B6EA760279AD45E3C24
6354E8B7F9A47871017C7E2C04C99C267DF3FEAD45F404125D2B59D9E8B2944F
16E4ABEAB7F95E00076C43D40CD099B7164E40764056143FDB507A88C9B7349C
62DF769FFA0133F250077DB0D83AA871B24F516409F803426BDC1AB9FEF080C4
A37E2906E25B5132A9CA16517C1C202CDB873D3BABC4D66177DEC8181633DD89
15B2255BFD61456C38B23EEF2E87D83D1A68FAE2238D5FDEA7948A972D9BE4D1
C55C430158473CA6571DD7A4C14E032807E1BA938A65A6F56EC07545AB0559A3
AF3A2FBED046CE438EAC1C789245667F0457D6A7275DDB40F7B4AFC168B639C4
346605EECD67F2E708656839CBFB8B87D2B99645C7982171C6203E1B5BF457B5
6FAD1EC9574302E76AA598BAA32BB91A6471CD506EC37BB412BEE7D58CA2FDCA
35F03A02B59B6DA3DD19ACFB99892D3E9BE22FD45086F515FD122B53BE47EA3C
8C137FD61901EB8DA9D883183F915E97BD4BB5A8424E4C2434AFBE3FE5D6F11D
5E4BBFBBEC47089506F922CEFB52A5E3D25C924F284B60D08CFCC69F8AD1DA8D
543E9F15687AA3AAB7B0E638B8E81EE6FEA1F9F92A42845FD1013A2F4115C83F
273BB1494A37EA74C02DD0F462C1EA9E11692506D967E49BEC5E448886A8F8C0
DCB56662D6E70420909171704ADE6E97D9DA932E8BB4E0FC8EDBBFA31926A65B
109AE2B75DEDA2DC900222CBE80D18F37DE01A8D3873E973BA6B0482CFCF6B6E
EBA3A74F227164625B93A16DAF98DB46AB37A07AD112F66EDD592C49FE1F5E5B
77F7AB022E6E514CE82F50C660C7CB5B2E52FD7E7D8661050362A9FCFA02903D
327888BBEEEB2EC12997CF37A36230DFFCD5D9A1713758C44467D683BDB70E9B
5E803F747AFC1AB6B72BF0B0EC2AEB396A76C0AAE6BC62A3A1A8BCDC45C0644F
BC9B80D5A229A199D7A275F6E85CECE9D135FC9BAD140B4D6CE0982C6D8CDBF8
518B39C903428EF2234EEE900360CB7BCB011E0D601F123CF3DA0F9A384A35CB
3C4CAE7C957F649F1A548B55DFF0A8B0C29475E092EF4754DFE3C8FA989A1A79
ACCE94A81DE46B3892577F7E9CF896D5F24BFEA577EC53201727654C62368D99
6B28B0BE6B153E519494361DD52B8A100C26638AD6770E0F39B20B44DAB1613F
21CA0DDD7B7057A23B6FB05DCF0818176153A376198EB6A6E8A1DE978BF88126
27C7168050190A6CC6C0D34F28D44E28A487B94B073051353DC11EC5D0F22E9F
8E7C4B98E134BA8AE60F0BEF6EE83E25BB9930EBD89F01DBFE49F6D536310B48
172AE218D8D8287D4266BE6AAC159D08005157BF9054AD5F679822C0C01DD768
0BCCFEA59033BD915C3DF3E61692ED83BDCD772A1B9A9CB8C1EFB8B3AEB8E75B
C2DE470219089D220C07CA1A77C9A74D2DB0F75645EF389BF43F9D4B8A6FE429
035B3132FED358CC0611DD3C1CBA911BC2D665EB35E5A0089EE391CD6F13CDD6
1BAD2D35D69D9EE91D447B3AD0C1D7CFD456E0245760286780D349387CF08330
066A4060314E2E1B8E41634B56D900F24DD567A9553F82CDA6188EBDDF260048
42C951C7CF733709FBBF92709103BFC80F2487AB62DDAB95CD40CD4C8F5999E1
E44EC1BF1A0794681329825A1922EFFA3BE1CCEEAAAFB5DE7514A78EDADD3ADF
DC6D847C45B9CC67F7AF33B63A9B0D82BC3BCB22DF8A2BFE901FC95DE1A2B481
E9DC5780EB10D9066D06BC10C7E8E15E3E72C373CBD7566291D887E3B431E4A4
6911563B09A9D5F139A491ECBCDB34005622830B9F943106625A3ED683F4E61C
5764107843BED832B8A9FE88AFBC04903F3AECB51CBF1803EE32D6C15A70B057
47183FF1F3178E7176B305ACE025FFA18AC6B825B8A1C3F4DE0CF83C47F17A85
487004DBC17C8416BF4BC5E05DB6D173A1213FEA0385BCD246F7FEE8143272EA
5D1E8B1BD2FE25A2AEBE2C432A42F8C98B3911069B1418BDA58709842521A28C
61B9182A3702EE506384CA80FAF5D8B06C5152036A0FEB1932F7A7D2B77866A5
E81BC3F2EDE7D10850516D01AF0F3ACC7DB7EBAFE90F72CF04F12F282245375E
A60CA0411BFEF3BA1C912BE301309232540D8AAFC4EC353A285DE050E17DDF6D
5E6833540C93D9DB9E2CE58D389701A2B1B20403BDAAD1076E786E78A5756A9C
20837EC6115B64E5E7D18954F133F6E84BCE5572E0FF3EEC841881D3BB5538F4
D03AE59B69A62A81576F0E3BFA28F77BC7ED574A7665CBE1495AC3F7D61A9DDD
2339FA614DF9D6D3CDF980F90C4CDC5A083647D16F0084AC8E3371865BB19A1A
0A24C46784A5CD3D329CA3FDB3F0F5F6086DACA9385BEBD60D212645C77CBFE9
DD3FF3ADDBE62243869CF5257F053D3E9A8F94C0D535EFEA99B4EEB3926067D2
26258987E6798BA8991416FA8E34986C4849E49E418F58609F192380DD2F4987
A10011A912227B14FE9375B65A1822311807A65DB84306081FF3F06BB13FCEEB
8444483C67CE018461A8690C2D61B30237C5F34F1F53D2CCF95D8062AC5CF34C
474E9D6CC7C845303DBF96B5EA1C0F93ACD0897C4DA397591F1F72EB66D2298B
83C6ABAFCA41FA50120330FC6758AC8B16B569C414B1A0A9032A8739EEE00B7D
249BA8C182A5C320E5277862F7204D553F18089F7E5ADED925F1D692AF91CABE
E691970FD7E0BA3FCF29FA0EEA8FCD00ACF503A4E6B75E5C9F45A0A810F54522
9118D77492F1C83B38DA03961B6EEB8E5A7565752844C3C02654DB71F77EA614
21B4D6CDD73763DD767B6BD1B7C6EBE87F52DF66A85FEDDFEBBFD10BC2ECFEC9
CA0769315D93E86A2D2B425B1D341A393076281C008C27919E1006683AE477F1
587A6F164BB025C124ED20A3BD8B76E558740171D36263F1667441D8D5DE3D67
BF80A1DE8E9891EB7521C8BEFF5B604ED1415AE6AF8926B1E638E081F7ABB38A
8EED1B2F53683C7BCF806818DED778FA304AA8A0D7ABAF48F99A4644CE91D384
2D9DDC1B52CC1E30A6E774696C25A9FD294F3722C8C18F2B2C23E5AD3DA4CB0B
D0D8B305702C2E13E64E4DC7D08CB7DAA39AA67A9364F69447AEA72099C7F3F5
3315CA0B7735C25D13462662DCAB30A95F8022A1EBE7B4D39BD367915B210B10
F9B3661E7BA8F40C272DC904703DFCA845B94E0D5B2ECB5F84F843EE8BCD6BC1
51E99E526373E8D2683B5B9F685EEE16B57714B4D663F5C6FBC3CCB4AC995778
5A2808CB5BF0AF9500177F9768DFD2DC76ECCF18D5A000D0F9C8815C729770CD
C35F1E5455D00808CAE6E6EF7626E6E5FCA3C6AD820A300F699124D83CE5D738
DD836EEADE19E3BBDF3316E83C25BF84EE617FABA44C397F2944AE43C75EDA32
3161799661A85FFA102A52D9AE1228D1BF8BB0692D44F0F7E6D27F8A727FEEDA
ACEABAC99B2BA3A66C2C103EAFD685DD77D1F94AAD19C099123A2154229C9FEA
275D9CA91B34F0211895905BD2FA23E67271B94984A5454DAB99C451B660645B
C3EE5B342C4EE07300E922839A8F621CBEA83537522F347A7E54C91D6968DD0B
F221B934B4ECB6083E918EBEC3C84CF60301FF503201BD33F0AF598C70266AA0
878856310B2194CBC40FBD1D23CDF19508E4C7B7F4DAAF40F396F401ED0C2722
C63913108E73667F562BDC281AA72D9CA3EFA864ED5571937016358E59C461CB
DE80C5AFEB65775FD825969245ACD8452B52FB0646CD37953A87F24E434AC076
E2A9EB88D9CA248381EA0D149AF98358FB59D1C712001DDA4FB8E2FEA5AAC03B
EA0D24B7A9596023C06EFAEBBE4194BBC94464E23A822D2D189CEC1B8D5FB276
E87F868A95298CD7C851D524F32375E541AD33DEE5273C668A33A54D6F29CD29
4A357E17F03362D5C381C15ABCCFF28CB88D3FA2AFE786F4A8E40EDD8C3CD7D0
6A9C1A09839E1B2C610C136AAA42047C1391DF848D63877104E9ABD1B9A9D2DF
EF19880C951A35AE737CC72086D947AC8A1919E0DB6B109E9A476E2F1AD0901A
7998BBD126B22C6199B42081FAE9CA1B9D9CA577C9AF7E47CF86BB74BC0784C1
5E9DC8AE80BFF2E834B44CBF83D9AD4034C92C87E00E96F48E847D3563CC7D51
8E2B3549DB7B7B9B0E1BE95D562785752AC350F1AED7451ED9251305926FBA7E
ED76BEBA1A8316018BA3E5CBA1551B815FB7454E8C6E75EFBEE162AD150FDFDA
4BFB4A0F836507FE74B02B3D0C6B9BCA56D9F3276C5643AC2C5A9C13C41E86A1
B94A035E6FB0227F6DD6E43167C94BE6E095A89CCE02C6E0A19B83B0FD74C151
5C21DE00705EB65C556912FB37529B19A7189C73C6C6972CD541C7282030015B
AE552CE406CC66F59622C169F85D8E44782CFB6BB947D68BC8A7751ABB3F543A
A3979C714BFB1078F650164B94592193F81B4680A62D18B9BA3011EEA2A32700
D13BED38BCF501B5A3CA3A3F7FF94CA8890BB56D2D997492F12814DC52D0BCA0
517D55CDEDFEF36E5A859225FF163E5F758058BC01BF30774FE22B2AE3D629AC
09BC8102FEF2314A46DA6B2563EAA0337047591E8093FF312ED585EADB32A868
504DB4F4B9CFF462B7A57F7E8D883185C60BD605FBD51A9BAE076457001E9CB1
577642EFFADE4956D9F67A9AA818A1D0134D7663C7609A2BB1C4D7FC182E5DA6
9C511CA1AF9F1A4F454673E577CBF85974541354060F0E750F8157ABC3B8244E
080A4D61B0AB2F6D7E90721CA38DA648CCDB44FDF64FECF799385D7AF50AE50A
4304DD214D4DB355DA9E44EF2E0107856D18EE9B4E87F52947091F3F638D7D3A
67FFCB7EBFE996E0A0CBF2694EF9933DDDD57768E7F97B99282E2BED9299A26A
B9A4A61B80408BE0DA80D8ADD32EF6FD45F854EA35F2BFE00F6E33B7B87F05C7
987355A0108592FA954731B412CAE9BC13765428326C0BEF4C80125990A45EC5
5B1CE5366A23121D13CD3D3DFB604C3CB63F1E226F788BB203FC350EEC549852
75951F1C5DEA75F7E1D006C791FA2FBB286A8A7FB72898900335CF22E1C064E5
B23F1F57A3FC75D694123E32B8A6B0DA6F1A0CB27F0C887935F8C5242B06C97F
B387EA76C343EA4A6840A663149BC5F148822D1B21C62228E6F16CD644F23D25
F6F0EC119AB1F1F1A1CC0179041A86E6D9224F84A74AE8AF738EC8F497553257
29D7B37BBEC58BBA69E2BA6C3644519B4A4D2E31C4038EC74E0CB5B2AC96ED2B
0C921978528280B627EE813C7C7A94B6F88E21FB1726C83F08EC422F3D14EE71
A5244DD22E81B44B1BCC5C75E5C42732A4F1F64929E9D7075A9A10497BB01603
95A178280B4BE8F2E993B10D9E89600EE400CEEFB424F73D1CB7512AB85288BB
664F1EDC23417C420F6474AB8A117DB210636D51CE8E5D953D763168E279214A
0E445BACEF9748D8F6CA8BAF3E65BB3B7FFB19D2AFAEB1698F8002BE2469CFE6
2284BF56BFB7021724F5D6F3A751BA683802B7F48D1C931727BB154CEBDE98F6
6DE1FFFDC3DB86BFA8FF1ADF2F80BF527560C0C9F9F4AB48D1BAC318E2717E7B
7DF1E7B1F575ACF00A937086C1E56860DEBF26F83D38021574DE0743F97DB1D9
47BB171C4D3B8898D76CA08330E433301D0F0BEFDE8464FB2535981A3FC8F2DD
4290181F476E42E67E593069257ADFF8A0EB3EC8A23E8B731B55B7E1BA06F7AD
D9D8EC99AA9028AF9057294D64EE9794733945EA5095EBD77C732ED84FD8A55D
05689A29B3815621CA02FFAE9E97E6DE5304D99F1DD39462FF3319C6DAAC1C54
C155B7D3CCC66A5446E88A439DE831B9517A313B0D06ED70E00CE906B1511191
BDE7C865B8D809A4879DBB32A643C5D839AADC4B3C70B118F35D14770FDE374F
A3DE66B26FB46AE709F61379F33A649D46CE122C5C772CDDDC2097E1F87740EE
CADDB2DD85AD667CBFEC91A8A4500FDE6270652B8DD1D1D4431780FA3E95926A
45E2A8CE6D74CB5753C2AD6F3BFDC6029E799AF435625AE8F5EFF89E5C459B9F
AA8AB24C7A59264A1F492F13723CE16D535779D71A84E9486CAEE722639EFC3C
75976FE4120B7BE218277E7A8D45C578DFC9E690220236E33EAA7435BBD45C98
8DEE04D255015D57D8BB40EF620D02F16531411FB744925007BDC400D6917915
88113CBFD927FDF27B34E08DA4259344D10B7F3AD9B538EDD6C17BA361D12D00
54C6CE5E9F463BA24E3ED96176BD74886FD85DC3FB10257CE79CDF8164E42798
771C665686AB1D8E83E32DE036039A0CE02569BA2CC4342EB7E1408A190FE0D1
F1C6191E1F102397536EF123F1A17FFB4DA0E78F674ADB9153A078757C24CB81
0337DD68053EB82B67B9E2837E83BA74823EFB9E8633675632C1FFEC718A743C
5AF2E21386595D7496A792236938C821C516562472BE93D24B399833DCE1D1F4
3A06147C4381EE65441A4F28D26D61CE69C6E7D86969729463C0C658183AC71B
80EA4B8F08AE9E1DFB7C203365235A3F064EB1C807FD12DA6DED70AD9733013F
8237CCDD4063EDA119D0E36CA1F293174FD5B8DF674714ABA3C987321A9E3A1C
0DD45C6BC86636BEF4EF3AB265163EC92E1B6329BD446816029DC58BEF915D55
4453FFC6374F41F70A0C741CD51C1E6D46DDE14E007BDE13A6DA549C92FE1B9D
88DB2DA721A0F2869495B09F35113654B53273791A9933AB016E953637643A4E
0CE6E46DC8F430C8D85FD3A590A2F5D0887205A8E3EE319E3FF5870D0404B5F1
D57E9ECC0C5A5384FAAADAA0EDDF6A0122789BF6C91A2AC66A4290EE5A5A0716
243A37FB99FA00592A51CE20801866BFEFB84589FC657C177379AB8E006E6BAC
1702F0DAD4E368292960AFA62EFA0CFD29EEB5E0F9A96F95EB318ECAB585BC9E
F92F6DB8A8BC04AC7F2C3C2806CD4F4E359137C03B7E866A912B56BBA7E432C7
559E6914DD2194E27DD5F1910A05C148B630D87F7442625DBAB484E3DDA78BD1
9E773B75E0DC16A27A32328FA207424137D105E56824BF40246A18A8D986E5CE
4C21DE9D91B6101AC040675F7C3433F80E4137E9CCFEADD435FC6AE787A1A94F
2D5B72689DF4AA8C23682CD20D8EA12DC2094A7C74CD6F730FFB1B751772BA87
5F70BFE04AD4322A42A258B607DCC417D11F96FBEEC3E5CA6988F52F45E3FDB8
76288519E8A287D91D0E9C48B8414879CA8F334009237EAD6F434156A57D061E
6C29AAC83E42EBD0EC3BA441ADF0FDB089ACECD06CFA3FD8D52D74343029394B
CF9CA255B40540B49AC732C273244E947F769860EFB326563D150BFC6B8759F9
B86E71E3EF91175A74D9AB47A8F0E04B032884663A3D22926EE5E083FC48288F
8167C483DADB7C329896FC741DD36B43A8D5319EB8609B971144F1F3AB22EE97
5497D6CB189E565BC52CEA165CAB64AC76ADA4F039DBEA4FD97A6134F3F982F6
4E360154EB72CC1A31495B418623E26C66CCF1DFC6A4D98EB622E756137C9407
9EAE101A774CB618E3874A5C6B9BD8D9888792C703099B21AC987D4137A9F511
93AB8A6F42A1B9CA40072661EED735EC9D0B93AA3593D015B46C7664F7EB6C76
378D567C4111285538C090AADF1EE64A5E65A173713861D939C4E571495D3C20
04A468966D515A1D1CD248BDF85F7AC3A4E23786E2B37DD262D3B43450B517B5
28344932E01482D497AD3AB5C1C87482CDA340F4EE508D19B02FB9EF464AA541
AB6F78F831C6DFAC725A5B7C79D59BBC5831B37D6765DCD09AE5C29C1B052ED5
1DC562C56AD71FE71C6142FFFFBF863F81454B3C58EAAD73C2C7DDC0BA75248A
5C5DB5067D5CE9E460E757E43F76C6D51FDEBB36F24C758329B9064F54749AD9
4F19295EAB0A47E6A78381FC5A0B48DC3F1219983AE607F96D56B99D44E908DF
CEE06744376C14CDCFA1832FFD1C784BBCC6CD16AA03FAC7EACB0E00867020FD
49D5A5D1F545BBF058DD540CE908DD8BEEFD1EF79C43A1AD0CE40C349AD40A70
C31D62D9680F44D86DDD027670766F199637495BE5D0C73ACDB536D591E5407C
8267D52B76002C6ACCFB4C5CE5663CB42FC56029F1399CC7587ED9604F1D385E
1966ECE542BF842B302272CF28CA5535A3234C89BA97B9431B1A48C56C29FCA9
3749BBE03ABDD552E381F7D80B0A1583F99B2AF9DB27CC6A399059A58EC24F4E
3AFEDF65943711DC9BD214D0788EF55F963F65B5042BCD729E0B342904A73717
5AE6D3807A471D1F4B02C7D688E51E61F06BC52394D3AEC9B0A728FDD7F5A195
17873FE50161EC1EF74DA2DF0400AD5F1BF4935BD65640D2606CA38D43B1BC7D
02B9A2B3AC05C98BA5DA0E46A5BC1859AED7E1E4DD90B828782380D6228572E4
AD37CD9BCE6E1F91520E8F904FF4D1F017445CED3400A9157E30443ACA6806EE
55B95C17E474EEF7E3C226909199DD3A06996F2EC885876A9423C12AF9052E96
41937C5D730C4C30573744E7DBB91772175C53BD136687788653CA9F5E76EC10
EF1AC0CB3932AF7A06A254B50B2E04E14374BCCB3F2488C28585301AFE40FD5D
86407748183A0543515AEFA6CDF70B909A9462D594B1AA1A4950817F6D85E9A3
421CBE367E8000B3654FAAC2EA2BB0428EB9FE9D6D702E02CB272320028577D4
A103035B9DB18A19209D81F9B215FFFD29A7ED2A8E30D3C47ED7AE40181FF333
1BA3EDE6DD59D6EDD7B9E1E8B80625E8184242F90D62E7328E66B159EB9A90EF
6C927B65657FEDFD9C93688FDC9F89078A9F0C6DAFEF3910157DFDEBAE37E276
7F34BF2FD165A64FD662AED779E958C4143D73F869702F3BC9306FD3939D5A9B
49DC9CFFB55017B751346E03DFE2B481F5BAC426970292C7C863B3D3703B2F0E
2A840DF5A3159D54CB3D98095AFEF8BF7A6685A69B8980D0A3C516E88847B0FB
CC718617E9580AA828D204589A491238EE889364B1BB21259449236A4D82E78F
2F84AADEF7BD696CA3FC18A8F981335AC3A8E626E7652164B6D447F5768FC432
150A814096624223C32BBDFDDBA162E4ED462901EC485D5AD9B3C48E5752EFD0
350221015C65F118CA4D03C42E6CFFF4727B308C7A1992AB3D75839B6B5FB28B
093A51164D17F103DBA1F20995D202D64A3912913903E7CFFA6513D1A968B6A4
F5B3C00B02188E9F2375F836890692250B0E371382F55436A872198F2BDD443A
64BDCBD02B253E47CE30C91562BB458CF69AAE914E93FF7A93B8AA356F767564
41173125BDE03428457B0D0BEC9ADB8D8DFC2CE25F5C149B41F3BCC9E8C6AECB
DB6B7C824C886123DB0761B16178CAA1C314D767850CA1F623FE7E5E6F3BB3D7
39AF6A079CA3C751BB6BBEB538726770F594D257C911558D443734C04B6EEFEC
B3F3490BE22D742308818DEB023952326A3BC4BE5E399FBA432EA2AAD5CEE5F8
7EA75A761C6C769900F24386F00E57066F573155092D823BBD3BC569EC3AA85C
2B13C4A71FD182BAE703EFFA9D93237F37FD5279A3E37634E748BEE914899AE9
6E734196E9226E59546D343B45BD0DF9172F38236B526DEBA64AD548ABAAFA1B
FF15479DAE9BAEA81EC9A9E4E24FCDB6E7FF02EDE6A7FAE0093EA228F67AA098
B1B81199D17CE967929648C7DD0CFA6836C18E6B94B3F772F7E4352F1862CE4B
ABB13A6497C0B276424FF44C5356AB841F46F8B1C2164DBB7371062CD856BB52
F8139053DFA476902F91FFF17C404FA3987E3E7433BF4CA300E20FD6605AF02C
F6E6679173209CCB73C8003608251BCE80052AEEF23B556E35810E966B279211
652A1890ADE7DED0E256935DD2E9D65C5C4C1EAA99E83184BCAB4AF21985A7E3
78B5A3329279E19C56CF9CFE9F471DF17A6ECAF6BE73374A97D3D04A32BD48F0
7475026A7ACE2E1FDFCF96D60420B1159139E17AE9565160895C0F05AD997616
C13144DC59F00C570D37E2765BA0636DB4EC3DF37DB4EB984FF189AA49988746
D39D94C84566F1B49C66DA8E66A432C618B86471E6A224FA9A2643BE45C88E49
F95A66DC5BDC993197C304EA9185C667E1E2A3CAA318E43890A57F7296AC0D6D
DE5E4981A21C1EB4C0A5C1B36255DDA76FEEDB1CA06535F841DFBE64844D4D22
33443F3D35CD7F44A66C6EC7CE19D7862A22EC461BB70F88C758ACADC0938873
F7DC8C1EB6B84303CE36E417671A8D8BBF925F029E8B0674D254C0C085B6CFC8
FD00F8DB3B2628C2353E88B786F9F66EEF0622ED02B7A5C84FE2352DF4ECC637
1F08C0A1E060719922F9BB08BB03C8C24BDC56249BD8DCD4AB21689C62D139F6
02AC8979AC0EC660583C6D68BEE22421A7618E4986F78B0E77CD1731B6CFB564
367DE85F61CE6C1448CD6F2A50D751FE22250C143104288A23466B6ED0172599
4C521290D2EF4DB39050EFBCD3D8765E7F7408678C0434F7BC96CEDFA6147DAF
69A6AB64FF62DFC5FB5A797E1D0882FFD739D5B58E1B9AEB3EA2D598C9582EC9
196CBC6A045E6DC925AE9E57F3A71BB90A384347AE9AE65BEA57AFBE986B5D9C
F6D70632D7AAE46319B9B2303490F6F4756F12EC1ED1F670CDBEDF1EAA5BF542
C80F5F8FDFB5AD0AB1DF6B8117C1B37F7F579D62C3A53303ABB6040CED8CB55F
ADDD53F00F22A2AF2EC2DB113B5FE001B3BBB0613132D44C8BB9ACEA65C82581
C8526F794122168AFFB9253585F542C5F4FF07ED9E4C473DE374C7DEC82D1722
4E0CAF3942A29B4EF4ED618BC2D7299D140845DFE4E3EC8D58D5A740C366E07A
96C1CA154584BC771804B8A5906855E481DBC0701FDFC188CBACB79F8829463C
FBF29562C5909027D83F79EDEFF120AAEB18A3D88AFFD9AB4BD6C6E054D1931B
ED5A4964DEBE18B406FECDFDB611BABCBBBAA02511F4A167A35E88A6F004A24B
88BAADFA4B2E582A8DDF2BF1F2E570A62BAE5FB5FF29CC523969AEA6D9CF6EF4
5F8B4124143968AB52D091A144CA75805952BDD06863449A9A54B97CAC9B6AE4
2758B61E6E1CF679BA112E13D0C55950880A37A688DB0A9F60F240F1193F7E46
90E9F42F2ADF0BE3F207467EBDDB041ACE90E6BC36697860D81CA91B400C57CE
4D3ADFD9EBBEA7101FA21F1FCCE61FE37E62B474FBE43256192C623ED7B3FFD8
7225B5A261A4144FA39C171EE466730971290C63B901B4D1EFCAD7DDB8F1DBAA
DA884391F78B533E57DC4818545CF5B2A50E8EA7D41AE090DB3C80806C75995A
71F9D124D2FFB93780C013039C01002183BB2FAC74C2AB8C22D644ADDB3D845A
010043650DC8312408AC5C0E9AC6BD3DB6D6998B1272C6E3DC698C896808DB8D
8481BE09342613BC5F9AFEACEB0E6D108C275A5E00E9A16CB73C68DE589CC617
42664749495D776D100CB7A2A1F21E1252EBE0AE0D03ADB3673499E9E7C2C2CF
84A87BDD5AEBC621E4089F2140480242EE5F4D24F942761EE979B953DF031FC7
D15297F7567B12BBE9680DC716D9851241EF7A195D4747543FBBC6C6EE3DD2C6
08BA1FB31C755F8EC005BA5C8B81A4A04ECBA0348B7F15A7F2CDC4E3CA78C24B
D370E5022658042D234F475F76F0598AABA0D8931ED5AAB7D323ADF6A610B6FC
4AFF33057DFB40D97335FA302A6A2B1F001B0797A2DF1408E39E9DF196F518AA
A4CAF1CC5F06A1F25682FCC41677F690A9380DCF4C45B0D20885C01EB534F7FA
E8096A29B50AD3AEFAEB2051100D047E8A3C3B24DAE74D3C07A8879C3D4B3F1A
CB7CFC1079FDE33DA0907144D5589314C2ADBC4044B6884B1ED3154F5A539512
329E77E9CACC2D8AB397B40F3530D88F34B85284BC8E567496AEAEE38F0E51AB
A07279BADA293818F8F9F15B5DA8EB9D6DFF76249BFACA0785AA219F3B77C9E7
360BB643FB294C755829916F630817DBBE5148D720F62A453DF10074060042D3
5827DD2C89B08FC31AF58A0A13D17AB639B4DB1326BC2A2509037DD99CE06193
E5BA3EC5A4F4766A75B20BD1B42E5C225A9BF11C9B1014ECF66FBC980405F5D2
312F1F25994FCDE0B52DF11B7E3E0791D50C70C5568D511CEDEB3CA42612DA6E
FB705B26E39C06D5A942F9DDE0F9D295BAA0E32FDA0DCF6E6B66FE20080907E3
B61B9DD252502BBECB504255CA25EA8C7C91777D1B8CD904E3008237062FAF77
69C7CCF9981201DEC72567141A9CA3BDBFE15C285B01674B71553BCE2ED42401
77F3BF50E8B3FC1F8C5A1F0A73EE2079DC670DC1F3751F1B0CFD743D3D33FD4D
4891BB6C7704019BCB6C3EBC5AEB910A463B976DDA222DDDB1EE47EC82375F06
902230700FC20807744BCB67CFC17CDF5D6AFCC79DC9A76EE6D7BE7A1311BA3A
D09DF1A645777F0D49B1990BFC9B848128CA15EBD6CEE436DB156E2AACD2F878
3799159F7AF57A756D39CBD5EE1615011E52FC54756640CEC22FAE636D20996E
0D355D0450C11A10F35B135967B6D1974DF7B866A71670CA53C13BBBED005CDB
1C057FA4B0FBE4E5C5F6DB307AA2AB1146999CC8065ADB2F4623B5594F7669F8
34F072ED1AEA657DF6C7682D6416B87521E2EAD1E0D7E8E6D16C03EBA439CCE6
8715DDBBF4028303A712882AAA1A3795414E638ED0CF6B0B3813FD0CD012E3C4
AAC46BB9B7C039A2252879BB18CC01D6D91DB00EA7FF5F210B8583F51E15B56D
29C6A0EDA976D75670A9527AADFAF0CE8115F592EED8F7873379A8C3CD450321
11A44EB1FE82801D77B47D3F6302D19CB9FBD855ABBC39955E795992EFE3FF23
E1FFB241DCC04F507A489CB7CD030BDCE384E4BC06D4547510E88F9987FB9B3C
8B9E88EEBC990813B9E228084A33078E5EA8944277DCF7770C86CCFED1F0E1F2
AD0C86C94FAB8CC49F4614858BBFEF5627B424927F418CE050540449A0FCD3A1
BB5A4DA12D96B5816143E0AB78003EA962889F70B968E95E356C41CA520DE8AD
132BBFE246BD687D9655BB62729389EE4FA2FAE0CC489F5B5BCCFA9FED557946
D91DF8D483E3449AF34CACEB4B122918E0F3B936507C734A306692A58DDFF0BF
646A9DD06117EC63A8FCC8497C4298C00952A67E6EB6DA9D80AE9E53701E29AD
ECBF21ACAF74149D37D5900911C9717A011C1E0D5347A0A661B2F969C5E71662
071399520656973ADCA47A2E275E11C0742A9769FBB9A796AD2042FF2538CF4A
11296FFCC871378D4A01481C6D13D9A529A5092C006FE366F0922F1DFF980AF5
46CC8027E7E5644F5C7C4E0F33FE2E395DDEC2E706E7F99D6A7F13307247E637
8E27C8B914153151EF92846244065ECE576DD0F694EFC70E7F6BC6DE615AB683
2D843AA5387C81074BD080B5B0CCB470C2E797EE6BEBD1BC2E8580258407DCCE
9772E1DE90DF9547662A9BCA71F0292BA4E616F3E7CE07C486107B4324E30D09
AF2524B724F766AF9B9A1CEE4D91A5621A41FC50EE8BF3112346F22668E5AA37
2E4F6C98D21E14D64319320B32AAFB5A6F1B9EF09A35DBB0588B10EC74FD7E53
22C05731ED84E8F8E0E1473855446B6F15042835257CAA479AEED2F233B5BB4D
C3D9B0E2A24B16610461D23FE6AC74D155EE7D36EDFDA0A1712E7B5E1154C9F1
8D34BB0EAFD0517342962721C96D6CC22F38D38176E8413E5EA87432F9FCC106
DF186627B3782CEAC1CFD0B61621813A05D7A6CE2A878DF1A0FBAC24041E86E8
BFA5A3FF8280F71455BF622FB0119EAFA85AB803439FBDD3ABEF8ED1DBF3D1EB
187E903667C1343DB7079BF51FCACF8C494C46A957B5CE4655EA3181787DF522
89A46CD238158690627D96E9AF5BADBE9EAB4F340EFF38AC105CA861C1BD2985
51C17E98A5F2603E855E47C2AEBDA076C19DB786990FFDF36C47BC5BB3685E21
5758A17998762C70B2E1AF2367324995FB1FF65DA697A4EB3A9474E8B2271B91
82179E149B9B7D465D23A318D369E3FB6100CBE05E622F0628975C5232409F59
57E9D314AF3311F62B98288981E7504D03A4BF29741201F3B326C4A93CF66A1C
7627460B89BA0CF7CC49841A75171D983D7C038941A8E8C61EFF6F184FDB947B
4C45CBD0F8DD3C405D882E724FBBA4F4E4FFE72FFD0996734AB22922ADC55666
8651D8D6108269E7569E6E9506C7F77F246D0293B579607FA874CF2887738D1A
7EEB0D49B60ABE400DB44DF81DFC838E0F5DE9A641E43B48CC4A6CC207F84A60
50F733B4E8280627BF077E3CE6609422DA5066419A1755AA60AD950C43DB0B5E
3D465BF0A62283155FFC91988323832815F4B915F8705DA725AE3EC3BB1D16BC
FFBC5C76FAC5D8C5B5BAD45081AB9003F72067917970BF4CD1BCE4CFC84EF58F
CD2D000E342A5167CDCD7EE2809F035F7860544A2EE333F18957C20B17FB41E5
6B193B3DBB23C7B68A3A9830ECD85E920FE0D7B5884D2906FC3900AD5D7EC26C
431CC9717F663DA7D4CAE442CEA822D541C6C80A1FA727608BEC0F6C19020D7F
16154A3C6641B298981BAC863001EE8F767BCFB4414BBD71A5FD8FD6FE024FF2
66E8D932770776227A0E7CD4FB9E67BCE1F3F897F04395A4C6E728D678ED7BFE
D8A19F5B7D79C78F522AA564C24CBA8F5834F71891CD4ADCFC0C62D6130365DB
02F91A05EAE04E75B03D0CD3935E4E497AD6A1A4C89BA04CAB40E3618966EC82
ED5C718532E404909CF9859D1580804D66B6C353FA578DF1FA755FEF7F4D0B8F
F3F847A4E01C733FAA04C9F59445B2C276741B543E00465E7612578798F2E397
6130954A9213BA70D7AA5839209BDD8B76F227F9D3075B0A94F62C19252C3EA6
ABEAD3B161103E482016D9F63CBF585C9797280CED5AC043B6D2260C32FE3625
2A6595A5EA2CA90597D9711B4234D90AB800F588668E1B6F44EBD6C930E0A9D7
C90D7F7F5490F6D65B37E7B80506343A79E03DD4C25957E661D23272D880489E
220EFC9FB33336901B687BC28B1C9C42A211462E8516FDA417C2A5BBC1A3B422
8D6526D5AEE7003834191F4FDB98BCBC8165613F5A9D9DB6DE71BAC83502F565
3849F7841C7FBED60ABE6D7FBF754AD3163E2C3D35C515DB2C5ACB4EC973BFBD
11063FDECA38E9145602E03A62887BF5EE838F4968E6F4EA245DD11BAF05CB40
A714DC84FA260A2A4378735B11B91614EA339B13D167DBFBDC57A259A8C93BA5
A93AC1BC6E9366094673A9C73A19EB3BAF7C238496CC74A839683696924A7103
4D238CFB8EC2C73224D86A68624855DED2AE7E0ECAB89030196A1AF7226CC2B0
FCF1780B8E9232513E13A2D88CB67CECA90D4D0F24BF6536B8AF37D127E7FA09
358C9E4E0E1F00F0016AF61CFF64F8B34AAE41A2706B1ADBE3302C10A67E43B6
196A93C7383E662D5CA0DB32D99DA1D105693643B849B7E846C1F39FF009F5BF
792704386AAEFF889D77D4F57C34C07DC6336E4A542B42408EDB7A9EF612D5B6
E50109E3ED2E9B08B6178E2CB49FD07E3F8CE191854852599DD8D0D914E6D371
4CAE06B968507A452F81C812A4545B286792DA1307F32BAEA530E1E60147F941
7FBCEDBFD2626DADD6E9399D52359978AFD2660D760AC331F336292BF7820D17
7194358A82E79436A29E8D4F420B66AD2BEEA174EBAA735748EBD5720A0B62CF
A2884431CC4FA829FA1921D15CE4BF1CFCAC7594AC667E5F1BCBF7A8AD90B261
E5A8466F51B67785049A7CD5C0B5056A5D652EA5C5C05E16895620ECC6896044
B89011A73FA8EE658FC7A08A586B816A9F18BC9687EB0A074981B13D25904EEF
3EDAC5C3CD77C6769E19CF92EB04D745A1B1772E11078E5D9FB9D2DD767B10A6
C75649B336BD102CB576436E36CDCC0E6A9623D7F914A5DB2E7149A27C188EF4
1F453B5D6817734459E05D275BEB9D61FB8D4EC8739E10F85F98772A7DD2D14A
96B1DA2484759CE418A31B7084765A7955265C1DA853001594C8664F29F82463
9612897484C3F4908C203597458CBD8661105D0AF5D5B4759C59A2CB5645DEA9
207FECA07A60F0D6265FD50332985A03B154FADCD74AF681D26B73C36E2298C2
4980F434FE1533A80BDBCDBA59A0D5F110A24A1334B35B42C2B93E0051AD38E5
719D2CC2B3F906A3016DFCCE8660F8CDC959588AC5BCA51C8841796795962125
D722BA3A81F772DBF943FE83E5E0AB633B0AB78081DFB39907BB10A9E57ACB76
2CB07CC4FA296B34912B3C4210ECE76EB6A6209D441C58A242CD10719D1C8009
D7519329873ACB1CE5BCD3AFE7DF06F2E3B8670CBDEB3AF1AB221E8B1F68321A
5C19763224B2B7EA82A77885D17DB51E84918ABB683343809320F15EA02DA3ED
2B477D64334A0CE9292C59F3D3BC759C666011427B5C0F022624757154A2D595
C7794EDD381129D12E6A76EAEE76959FFFDFC742C4A6281DE5B436C319BFCED6
8342FDB0CF37F95B9BB57A13B35FB298B3881281DB2D0C344A759A92F102A0FC
242E71905BD62EAB9F5D527FF3C1380F828DF8EFBAE967A70186A7DC5AC833C4
B0091011C7EEBA1BF3DBBC155733C39621946CA6E06D043E7FC7890EE1561639
61697189EC967BEF94EA42D82F96B6332EF3A47A7859BF62B7858A1DD16DF188
93F9393F9CF92F2D7C66AD20950EB6E48963FB7617BF9D422737BACBBEE8014E
D0588CF98414ADA57B3431CD0A19827327FE37A06469918B222A2E8FB0E393EC
8CAD604704956F43AC91B8D821E47C78E97F73C29D819652389A42B5692F6E33
4CB0ABAFC323CB1DED14CFD815718E3BE7803B6F3411CF945704BD38A1FEDE5B
C64B8AF839DAECEA321CE225A1B51E61A2DD28EDA14BCA551381512C2A2FD2AF
DF83F9CAAB7EA1C08BF0DEDE85AAFDF7354842E25F3062DC3EC36B7814A0BB9F
1EB85E4653004252765C85102DED167E1C537B9DD31B212C76062FC22764472A
0908B8417CC5E6E44427752EB66B5A79480EB8D330725CEED12EFEE99FA836FF
C7CDA9F7BEC400857AC541874AC1B056CE9D16B5BD4688AB056AF4CD61DCF87C
6A177076D196D32A49F7230E1950679D7B5A8FF4B4FE7709E911B3DE1C3132A0
A0FA7ECB31734CC0E0F538ED9B491B6D4882DCBA6C8A5051E373EF5245111EE9
1BAE28D0572F94089F8FE9196132C8F1D936C8E8753EE6AF5F2417C4E0392553
3C6B783D5FC77FBCDACE344DB7519ACF01851E32E9B538F1E57D898F08DB3898
F28099D661930A3D03CC1FFC01639E7EFDDC8579243AD82439BCFDB0F8EA670D
1BF01B90571EBFFADA5DC50DC7B148C6358D077C3EB6C13833E34F3C04D938CB
28C1249C9D8A632A53E672861353AE13096EE4941AEBCB8BBF78F432214D38DA
50329B326A8D9F1CACA6562D12B9BD92F28E159F144D27C950C889EB310A175B
4C90BDF67D735BB7469C0473439A3CB3E41C1ECB875D2185D5B7BE9C14057573
279DBBD54C7D1716BFB4232A291D13B5858CA61AB5A293FE3BEFAAE3399F7A12
2158696DCF7FBA7869B2120EFFCAE499ABE5E3F7A0E80DBCA6633FC0FA879FFB
410778ACE2E0B3B5B3FD0F9A793CFCFCA9DAE4E27C0604A2C16A7A7BAA8E39C3
7340F529151E0F7A7C030190C7D7BD0943E80A8064050DD57040AACE85435E77
714CDA1032524DF44109A522B1F34AD7C0B781E953F02E67DBEDC5CB2D287C3B
F9B4417867BF2B47915FB1A9ACC21CEF0807040D04843452CEA86EC7B631BF8F
4B0D41B94F27EBA4E0CF17950E4D3BA4C3D182949B628B9AD95D247BDD91DFF2
10CB9FB0845A8D9675E773FBD82C4D60E2F7D612DCF12FA2642C6EF1E9E3966F
A72D0523C2AE76F1B917B00CA1FA4B3D646306D7F66ADFEC676171761DE20DF9
EF2E9832B8FA699FCA9C2126AA70825EFE280179C1E6DE4F61EEECAD8688E6A7
B3D7C72207A54F8173EA49F8FAF1F35A02C9B3B7A5B5A08E15F903435E4C4CA3
1133E46EF01041FF40D750FABEA22BC0C77E8CD188017B5F4DA99DB675B4720F
127FCF6B96C5DAC3E20482E2F23C361F9A6D9DED06C3EC65DAE70971E800AA29
1D183F91D837DAC9D397C7475345D8CCDC0F113BD555E384C7879AC5879238D1
8CA1F38EDFEB4F01C17C97B33E69D05F8D070AB5F9ECF23124F90C6F5736B579
19F015179B10BB3B5B0F433CEB61BD42B28C61BAF95C8BF2432EA0BC643E932C
1EEDA0E8C46358F4220DADB76E876299EFAC819B446CAE92194A822A013B5CE5
224FFCFE8F5C374C2E091A5AFEFC520F558681970CDB9546E2BC222FEE56F92D
5274F9EC4D1488B70E182D31CEDFD81FEC9C984C141DC95C2A5A7CE5A10CA622
A303FFD234C4A8F6F472CADBD2695964FCAC5714C0DBE0030BAA8BD6BA0E3842
4B10E227596518F66EF9F8B92FF6B27A12133CA7F88EE867F55C8226DFCCA420
2AED4DEFE655C9F810E0504259C75012C2E5D8137B6A3B5EC320731A91A9D6D5
F105FC2C2EFB246F5BACB1A4B1EEBC3E25C5ABD2152107CFE1B0FBE68836091C
4FBD502B7371EA8738E90A047454969E7AEF7AB5ED5391D3778ECF10386E1941
DE784E2EA476632952010B061C7F02547D3DC706B872D711D7BAA551D4A4743A
FBA9E624130ADFAD7DF0AF1FD93DE12427A8564E9CB76942CC7068B127163B37
E49009C124796771C3677589A7D2F66991E40C7B616DFFF2DD45780E646FAFB2
184BAFBAF4894BCBF74BF7E9A3994CAC6372D50AF12A5976A70B8EDF3DF56AD5
07356E1B81E362
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX10
%!PS-AdobeFont-1.0: CMBX10 003.002
%%Title: CMBX10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX10 known{/CMBX10 findfont dup/UniqueID known{dup
/UniqueID get 5000768 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX10 def
/FontBBox {-56 -250 1164 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX10.) readonly def
/FullName (CMBX10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 13 /fl put
dup 46 /period put
dup 58 /colon put
dup 65 /A put
dup 67 /C put
dup 81 /Q put
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
dup 122 /z put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43B233BABF23DF8DB
B6C2BD2F04672F9A3B7FE430263E962F16A948319C51B8ADE6E8A80D3D88023A
6DEA4D271676C2C8615C4A0EA7DC8F6601610F398673A4D4B905F49EA868FEF6
39BE073001A36DEA6C08ED51452F062B971740019692E221F4455EDE46AF24B8
407A98B791F6AD525C72C09776247E194043281D04FE1CD1D8AD8DCEEC3045B4
F95B3B41CD3300768D8A049815348BD7AC1004F5500817E3A267D694AE108BAF
285B288FC5F28A03E9D34FE5D9B2F9A9BB26ADE66B1CF8EB5BE606E83D213C33
DE083C20D636EF780E761944FCE3B8A950B1E6E7568F33B557C6D59E0CEAF185
53E609A4F58AC4D5269116F958C4D115C44B5A6DABAB79D3BB6E60BDFCECE108
74CFBE258779F32C80CD7D9A7CEBA50A0966BD9961F71560119668C4A0C30A5D
ED91ACB30940502B24F33906D6E0F16F81DA87EB6D7FC8B7853BE388C40D75C2
2CA8F94713AAA1561F5321CE97997CB4AF0E37F44E25B0F73CF4986422B1CD89
8F861CA623004ADB1C28268D7F8C484AA10C9519B6AEADC95AFAA3304D60E85D
718B2F67D2B734095E5A92C90785252C98067DC05137BE735220BBCB7C341D61
C4B98BFB1EAF883D38D7A93195A059EF82B42027F23B6CD633231D704B891A9B
03D11A646F13898F20321D7BC150C63FD6DC6BF9CAFD8DA759E95384B729A0B2
767B9F3E55C682F7A248BC1184F7D294CFFAE0B246DFCC8F215625DDD4F49F09
FA8D41CBF4A06152FEB152C61539ADF7E70A4D23AF8267D25CE3B12D39D62377
547E2528D18DC4134FA3BE0437EE0B3509223D71F06D44C6227D62BD01AC0A2A
3EDA975E894371C07CA1027B102549A7D552FFD25ED2DCC68E29E71BBAB43C62
57B0BFC6A953ABC2EF703F35D112F6B5460018CDCEAD17F149DBE5B52C2B9E10
9818EA6D97C8AC884F6841C9B600A7D868F59C1D80E98DE0741D06D69858EC84
1B33C6C9938B7E8A6FF6C12AD456EECBD3EBAF0D7331536B9F6422019FAFFFA4
822E79D6D89D6366DA636CB708894FEF904F366E295F1CB808E78E883913C4FB
1631248ED6A7CF1095C0C61C4F05E4B9DFC47533A5FD24540AD71A0E2907B98B
28085EB88ABFC3478C9644594C7DC4244ED5A7C1CA8D960B65497D56D174645A
B88F12C2CF0A807DA314017984CF3C4FB7F47392A651EB9CFA961B28E2989893
9FC4D97171BD5338673F5D1CE2C3C08D48A1B77769F01D5058236C655FFD864B
80E28F900191D4EB349AA5E400A7B0A0FCA0F3E79D7A7C69775BF754329397B7
D18B20B2683CBC4A19729BA878B3C17EBA0A7E9EE297A5B67E915CAD92C8F356
582B8299DE6A58E73408F525F7EA895C48A8F0D626A06A96A50348DFBE479D89
4272576FBB0CD332193D28A8F11503BAE98F8E1D73CF5BCADF23DCD4E6586ABB
323568F5A34E359661074D50CD8D9DF27191FCE24F10225A5D721EFDE2547E1D
CA998077D2340B1A4ADFFF570AA677CDF3305D5E3A394BB1626EB35074D4EEAC
2F037CA2EA389F7683FD17A8E07C12B4CB3BA8C249C9B12D297C618009F76717
0EBF5F2DD39A6BDA10A2E5A811D4E190660F5FDDBA29201B6F8042620397AB2C
E59267A7247B0463891831A6F40582BC3F614E5167B646A8F53D8A31717DD9A1
9034034E705BA7884F0E0738307AF69D3517147C282747F2788462FDC4336A4F
9CD222908401A25F0A1F7B13B8DAE622DC965AD0BE62497420B70C04AF432237
E0FDD043456187658ED93B0F9822A3998511DF05E59CC85B7B9992CA0CE3B814
9723BAE70D2631F32B4BF93511F67179FFAD2075E1591CA5907A4C67701B56CF
A5E5B02EB4A842BA1F18D6864E5677359C2FB4AF5BCBABAFB053F230CC129B45
8D15413F736EB07C571521C7DE2A13F2AC1C133D491B0A607197BE9AA1231D96
BED7968788246B2E4D2BD330F802810F5BDA3760FEA5210CFC6F54748FB1D921
5CC3624BBA5B8962AA7D94159651589540B17CF7A785F297264F9C1006D36928
6E2756D3B623A6087E4B106FBA76255903C624C07E18A1AF4E185A533C640711
86BB477A906ADD36EB6C8F4A12BC2F01B2B98412E4E105977640930CD998D990
0254A1E5E9843B7A8ADE0AF6D5871E6D3D666465AE69813A2E26333213FF6713
6F08D55A90C079A56E1B9AC655F720FC22B5AD8550FFF26DA7B0C5A0B60DDB05
64E8FAF684F3A455BA9BC9278043D79537D201D520E38750335A4C8FEA887377
879331B68DAD6B253F4FF9981D0F9B9550ED5179B15EEEB00E560A3DB6E5973B
63403E4E2F40A3D0B937246E9652000B917B1369741E0F913C14C2D2D6D1FCBE
2CEC4422177C58523715BD070002EC2E13D383A1DC8C84228862B6C5D3B65667
9FA97E175239BB7FE7E37E14B96DD7960A8AD49DF428CFC13B5D3CC22E245317
47B5244DA97F1DF954CED2D552477237CB23D037C0DE728E26C82738954EEA1F
F34FE497DA005AF03746DD2ACF77F6E6F2C224862A1D18AF6F7A5DAF34564387
9E01DBFF49F8621C058C04C2B3F4F3033FF3E8A977B2CD6B2A3CA4A6C569B19F
C5AC457AE9AF334DA66A730960C7565E93A2D373C0E3DE14646FFDA05DF4C6EB
6D4CA8ACCA3C3115764F77B842581760BFB9E5C0EBE55308B0577A8F4D968CE2
BA3361D79378D451DD150C34D7E901397AC63B33BD7DB13C50D678F5DE999238
4B4EA15BD449C46F262D931478F5685CDEEC4C4201FC3EFA607AFB8F27AF6751
125DE42D2FE2D31DE769B7E7FD8CC8C5D91343B537139A822A5BC4160BB5314E
37501F65B4FC35475FE9E03E34CBF6795AE86CE409500BD0799DE39FA69978B6
EC74D2197C03632D3F59B85F404DB31240968FA75059B2581B101E028CDECC2E
7E5E25DFA106E9B8ADB81E82BE9ED3BAA9D03EEB22B7B67AB1262DF6AF5F5EFD
A5627EFEB84F3A5F92EF2557EDA2843D7D18C592635623CEAB14CC3620F33986
410D6DBAEF9F86E4E6682054540E2B01D8FF2161F10E66851A188BC15BD6666E
8D3F21709F196A31EE676D28A2D12639CC2E7020A52910F052E61A0710DF09B0
064171D05611451BD24FAD64716F141E1C41D3218A8115A3D73CA041D02B46D9
28C3D07DF0FB668E8E91409C8D0A26A65CD737C075E026AC0A974C9BE658199B
3B9D82ED95E4646977D8F60717DA4C68767DBD7E8320D5AA1D5DEB2E6B009759
8282F27D64F1F904830AAB501CDA4D9233FC2F12F77F0FBCC46E6B729C71F6D5
E6F3EA02EC35D1048394F4EF2177FC5EB726DE5EF2DE7997166B8BE5B5105D08
EAAC3481FC612665CA112D3F889A0E5B7843EFFCEFACA24A01B6AC2B7DDE02F4
A9295AA2409A3756BAAB44608DACBB56840060037869455BEBA46F10AFC68DD0
0563843DF111C6D34911CF13AA6023E5E899060B5EC60D0F78FDEF3E981151A9
24903EB13ED1A67EA1977449716D1A5A7EDE1A2E9465C9C2B20A58AF02D9F373
73E627CBF296B3A6A4670C39F3B5EA30D76F0362C81020A1777F0ADDBC6B52F7
213FEE1718214087837049CF2AF00407639657428B9E8B532F68B631611A3501
3D9DCA38090E227BD0D6D0FB4130EE866DB6B195C873AFD18DDB3B1E40F740C6
B3B375ADCBBF628A07A5FACED539FEDA3379D3B60216C2EA6629BE2F65199D82
FE3AE627D7C67270F3497AE75F7A9514968B5950E2D63C38DA240AF4E6CAE88E
E25167D179108679876E7C80C85FE1D2BCC2EC9B88BE76A8F5736E8E6B3A9CF9
42E58A4ECB7914865E67C1468CF66D658206830B9380FE346DC2DC4BB56A92CE
4B5E4EA9036C177869315A2D9E6CFE97E3BFD7CBE0747D40CE5E8A3A0988576B
8AD2B1E4314C0D8A0CBCA08844A49F7E054D31BA7543730C0A7390BC4A288D10
CE29E389A4791305D3AC1BB6F77C805F1032787306F78FF76A20A9E629899F6D
13356768D33D7B9E294E8CD50CBFB9CA02A193922BD9B4372C912D1689B6644D
52CAA30F7421E8114D077288119AD9514EF21E5B9989CCE2ABA0C12549FDF493
FFB39736AC9EB72DAF45E4EA6057527FA9F5AA0A1A3F03C12F7482E465C766D3
760DA7714D56C91BDAED507A5572BEB51A895F8DD3BD5AAB042650154FC7E4E5
5EEA6194DF73AC5EE2CBD4EE26E29B1D2D0C458B4850BFE842DDF2EBB4E2A25D
C6A11CA2D8F346E2B736DF88A3D57BC0380B52396A6C039212699F5D3342EB58
0C3DD5D01D5078479BD9FD10C07925556C0AB0F03606F33796BA72074549EDA6
E33644F62CA35207D7421D2727AD8419AD1772789D33405FCDDC9286BC34C974
A52297F5BBD2E541E8BB473F733AE5097BBC9D5FACF18DE4173B4711E28B23ED
16E0A6746A60F6FF903026A3900169EDA87D98396E762C2EC963D89197B8CD0C
25244806BE7CBF46BE60A8F9171731EADFC969C28679B025371E5572E52A0EF8
B3FD9B4638D03E20BFDEC9345E70B8166D38846DCA68E0D0B4B53629C7E7620B
45E0A610BCD07FEF8814CF915CFB11119F42407D1C6DC1E6353451D40A382C2E
C74DF2A4889ED5A3495C3E973565F7178CA190D22C9693C10EB12C1E7A8679CE
4AFECFC964CC98111BA4ED2BA9B10292A71D5B11870EB08EB483922CE8628A06
05E7CF6DF93E112B60EF888AA8DB52994EC33DC7277D7B7A4F913AD30257261A
D6EE80476A9A8D316D190BE6CE0046CBBCED365AB305495284FA921BE0638E00
63DB2AA4C5F163340BCCD1061B469504DEE350B82FBE1689C1B65D095405614B
35997D6F0DACA7190D64ABA351705B17B23FE2EE5996FCD607F49F54392463EC
DD5B944A4B82FA2BE3E75E2946D483060DF99277340B0AB65A2042AD088E2B75
BBDAB869D1940F64B50D25078519D18748AD64AC5615EFAAF4F3105B0111AD40
70EE173ABE6A4ACE486B4E5999158A4377FDA6922FAA6E9305F48570D14BC81F
BFF4C663E1EA9D1E050534F9315A663C4C5DA52CB02EA6408AA473C32CB0CD71
169BB43C0508A842F400240F0063243B4C459A1FCB3312C41C32ED0EE87F591A
BCB6D5D3830AE4645CB4D40336DB4AB6540B52E70E1EA415CC6D886827EBC5B3
EC35CC5C136243B0C20B3C603B648B132B99D05F9B48263ACFA59A856BE74441
FECF5C6D1FE9D1F4F9942F460961901E16017144C37E83C6822177B2A6C47ECC
6C47A1104460665E5BCFCF08874008302750EB991CD98D0D8D22B921F90B99B9
05EE7C39F2BC2A7798157503743C9F2F267BDBE2E8A4CDA7317F81DBF8962E1C
EC02822CC7F770FD4D08D335904375BF0C6DAA0510771627ECB9EE69C0F47D30
69A87052989DF80D9F4F19F75B070C3689AB3BE0966453F9D56CED6C1745B50D
813AE6D7E44B73423AB3778ABE4CD2C4DF40E14C5A426043F7057E2DFA2DAA70
EA6723F1C7967FECB1E7C1C0CA283334163FBE31C32254490170C3513580A552
19A5DD75E6C4ADCB12D33517A03318A6BBC7E4214266E125140D8C40F78A0340
1F95D9FBEC4DCC55B71E89375AA94B0D55646F6C069561480407D0A3AC127024
D7D1E9ED6B599A2A8766B8792F46D35508B66F302D289405B101A3C6BADA680D
8C56E2A00B766A4CB155446F862FCF17537A2BE85418E20CD77C4F1F69F70BC6
17BB5DA8FAA876D0E8BABE273A19C04A8697B3E3CF4725E2C77C8761A9243F24
96F8AE96399996001A57FD75106745AB4646FB9C6421F1D4EBF3BE533BD11AE8
14BFBD6D308376B26E08E4ADA490DDCCA94BE8240403D5EB0FE3549061DFB668
4105B4FE77189546619B6BCF3F9723E278E98D50A17DB8A4C46744FA21760635
5B332689316BD17C966D466AE737FE3ED7ABC443ADD88D4823A10BC9747ABDEE
027515AC353A420523F85298029475D8BFD83A2CD00C02CA07974BAA581D2215
A850E6E4C0A5E17E0EDF91C63FAC18C70093F40FEEAF0350B403E2806F4EAE96
BF616A805616EE55C4657418C26CAF54187A6684821B86A76F15088AC4D5B551
66C3CA8DC61E9810858D1204F899C7E3A1754F483134609F6EEE6364B1CC04FD
92C86EF194FA3249601AD722D75D1D395CD15A93C768EC60A486AE885683364F
93DA00A865C1035F913FDA69E7D9A0422880FB81EC23C00427F07A5EA3CCB613
83C859958AC53FAEA26A6BB39ABA068863CCE3D447720BC31A5136E08EE58963
093AF587A72112D55853A1048A2B1695DB2D7F13CC924F2F0902071260C33ED6
30893A04577C0ACF0681C0FEC23E5404F844A83BB5A2F8DE1F0792196139993C
1152094BC36A6AE5BAB4B8281E506F485F0BAEEBBE71E174B7CED1E52A8242F9
DBDF3E0FBA296538D964EB5B7A4E23B1BB0F59872C9D4FE8498203E3AC08B71E
D2B965AA6CD5D20DA6C83FDC86F4A5D68A58A72C5BB9BFE9BC755C56B24025CE
6F24443D3CF32CD711D3D94C7C1DC275DDAE3341D840090F97CB6CAEF274C94F
9F3BD3AAB3F98BA8A7B5CE5E48D1462DAAB37BEB1C10B410E8D33FA42D898183
BD4F807112D78AA94509E33C179BF7C9E82E55AA7D09E128A0DA06A330CF4AF8
5DC861498CE029CE8C1BD15C923A708F2E7AF98E4F7B34212A0CB417553C86EB
6DD46B0466F1A21D29FC5111226794ECFCA5DD4240C0B8D106CCD7EA6F03E133
BB7733F055D6FFA04EF5C6F872B4FDA3E42F0F036C4825543D75682ACF71B548
DED160ACD05625274799D0AE201305DA526E01A3D2A719B1B15C05CC09467F3A
5627860C0F36C503EE392E1786620F3F2287AFE56634E03566B9B1F537FD92A2
913166228791871A8F8CBA1A1DA634E8224058052A10FE1E67CBD3FD21A6C07E
243CBF58BDC78577847664EEA5225EB8D6679AB17C563848A9D4D58995EA3609
51C1443B752A070D9872FE1643F0677019235AC25DC2B29169D38308F2170A1A
A0FDCC59E6602197D2815B914041FFC7106DAAAF30CD97400C6D0826A40385A4
C8520119A065CF32CF2FC5FBD8DFD29222528A7F96FDA533145846B3428F8239
E50277C366418D713F84B12A5FD4F904DC13DB1844A391FDAEB97643A6FD2945
942FD4FC5A4A35E184F23304B8B4D93D0C37EFCC4E106D4FCD0DA3E5D2117589
3FFC2BD1D121026562C55C455C3585050B9460891B006F62D9D9B66695C3D348
A467C14C0256FA9621CB056E7CD389505194FF463BCC4010897F9A690EA87D9D
BB3ED4C174FBADB8A4744C6E4A44D773967FD703EC37672F9993DC48BCC8A060
6CEFE8E6B8F10886E15BA0466AF410B90DF0020FAB88BE493606B6A734EA85BB
926950EB10D2F2CFDBD182B0F133809612CCF6ACCAD049C8005A42FAF78368B9
E7684F98DE421BE0A3BC0FAEE024A7BE67E15C8394F17FE84DFD8156C2A3E94D
08259E15CC657E8CE3088395BF6B5F825764E141AE15EBD186DC049261623D26
8636705E06C6E4A1F8ACAEA59F91B042DF5DB9C2AB986A784384706A43E5F18E
42C29CC1CA86D4F247B3BBBC89F3633EE074DCA4AC15B1E33EE4822812A62E88
C32B0AA57249980EE17AFC1346074800FA529445D18649A0475246A25CF325A0
BDA06AAF392FD455218B13D9ED577D51A9500B9FB7860716A8E2FB3A8C4BE3B3
6656C6A5653AEF00184020ACA0BCCBF48BE3BF91E11C8658686C89848E714E6D
DC158DCD1C1BC03B83FF94C60B1DC71CE8A86B46DBE661C9F8F4677F8A2C7CF1
E41A91EBDA2304735147BE66CDFF2673F09D408297302124C127F0B35690CAE9
CE1679120CC4D582FB69550AD34A047DDFCD9D411724554CCED753DB52D6AA7B
22B0C55EB698ADDBB0F8ED15C971AEF113C74B9E25DA29199237B98DA4023665
C2A63A837E4CAB38F8DF37DBAB5DC80C0C3FA72C8A70DC76B5B36B2EEADDCE74
23CF794B66E4DD3B35BF99893789063BF7B01D5F186B2FDE518B2CF2EDE51F81
38244BC64548AC3433A80B86D6A0CA26D77F403C06D65B7394BF1FC7D06D37A5
E70ACD844E3367DE4DB71312CBB85ADD21D5A1F99BB8427F252D90ABB66D7154
EA5AF4A165DF6415A0880AE784071E6B3E2101F0B663DE14DB1ABF8B7CE0E6D9
D24F9CDD9F80028D37C9CB4067A28D41E879AEFECDA71F649EB3C250BFF809D8
1E427E3BF24E85C75F080D93E0314883988B3A4A2B72A1B4A3D2189AB6ECFFBB
C58151AF05AE335200711ED945E18B4BBCE24A8A162BD9BB26137253BA8B5819
41E759A7CA7CBA129BAAD438E87189F2F6AE7C86F4EA099DEB23705A500332A7
4F141D8778EAF3910486B2EA25AAD16B60DD804D0E5BAB0FEBB77BC95EDED08D
B8941E040D99E8F44E70FF842306ACCF65C0AC9673859DB9C3A724238CB8CE62
255BAF0145692EE3B52643A0DE3E667AD03EEF6C753F57E34AECAB0CFEC7B07A
150D7151E57BB3A026D50C7A88DF5F480147D87DFEFE463F76122EEB5128796E
46CB0AF4B537987C2ED552B37D83F393222659DB735F2A293159AD84AF082B95
6F1454471FC36D805485D619D58FC53FBD6E3F72660ABA559B91ECDEFB267268
86A75650C3919962B0139409A29F5E3FA70B901CD5D2C49144778CFFF1D5B63E
099C92AABDAA73D54689812279C95FB7A4F7E840DD53DD3197A4E6D3099446FA
C0032FD40411E8F3300A8A8934B5216B01D916D41DDB32513DC4ACFCEFE43D6B
22FEF13D3567B047C6B35C477ACF2E172701FDB0FFFBE01DD58D7E54398EF4AF
DA5A404E194BCC39BEADEE5C76D7CD1E602793B950256F25871A9760C80B1EB4
D1E1179C390BC240DA061C9D539B20F4FCFB72DD0C1E860DEA2988E749819787
F04BA7A9CC3EDBF9CDE46895FE31EF0F8DEB63E295E8826BF920C8FEAE3B2080
8C98DC43DB22C6537028798198E2D3B0453ED725B774686310F635AE6153D9E1
8A0514882D4CCFE9D2D2465513E42E548F64A50ED78AEC9D62E0F9CF61EBFC9E
E8832D60E91796C916FAFE58F51818B80BBA52C1C06D94E602481654E5378C8D
137E3A872753CCDE4B2618C031CFB13EE91C91335441C434296DDEF61CDFBF8E
8FAF25DB3B6D6796FCCE2711938D605AAC00F0A58DD1A03FCE8732DE541E5E8A
41FC87E1FCA5CD9B5E8D63E7A7D6CEBA67D8A83EAFCF490DB7185AD55ED0F0DC
D71412F8FABE5A24558C2CE63845D05D4183B13EFF7336D998770A0D22B1CA70
79302D1F060E41BF0066259F5ECACA629B0C28A9F4E65D5482DA2CC56AA8118B
CE62A09F9C5F4640F348449C01E851C4736321D6DFCE20133B8774F4D2E991E7
A981F856409739885A994617FC3578FBD2E7BEC58028D9D86E7E675E8610C033
94B0D6610BF9F9EF0A761395659C73E9CEA60360F9E92CE3C9F5E43C632FF2ED
52027089194E50D9D576C9751180B28BBDE5D04EBBF572F6E8770B68030BA4F0
E137492D09A24A0313720ACE328705E385DF93FF338DF2DA034B6DED05256CB7
CF304F1EAD0363A7BBEC37DE41E00884C068C7968AD16ECCF924043891EB6569
9AEF284631C9F947D9341793D4E4007A136572E6C3B0A9D7EAC66D120A3911D2
84DCAE2018F883AA804CC829E715C6AB21674E82E6B49A5DCA8AEE53295494C7
05259AEA93227746654ED73E22CDD4C959DE5D5C2E3EDC1064FE0D991777B119
A73DD5CBF1FFB24C67D677F5CCF1CEEE6354C604F3245DEEB9EE69C27D309A99
8D00121DDFE089F3DCD0B0079E3713C760ADCB9149E6CA108E6E69FC2DA16D47
74BACA6430A9BDD541BBD89F7440C905A3AA39B299D416E13F7F7EF0D04CA26C
ED51F1B6CC373CFD72145C6A25C355CFA70C07896028BC8CC17D5CB7A46C7794
F0A2CC89C048FEC738F6E20CE391699ECB7795D77D73BE33330D2310D88D5BCA
BF53511D26FE98C66E17C49C6AC5B8EBC8C27115DC98AD40FA8A4A7B83202106
9980F7DBE0AEB6B4859179D72F031FA46B7340A04B15B258E525FA7BB0DA80E5
FE334D228E2BDB2362EC9779F06003272B79C5118CE2C4843112AC50FF5F1FBD
B073AD2CA5EC36B484DAE5E6D1FBF36AD4440D61444B5940900BFD2EA3F04C79
820507E9CCDB5A43498105E340923FCCA7F30A162DAFE55AD781FA36E63C6D3E
25BBC3DB848D60BEB25274F574818FC2CBB204324CE4974AA51DFECA58D6E39A
E0A1015C64ADCF69972F4B1CB09F6F164CD08CF37483E9D33ACC84F0E497C555
DF65C658893808C36FEA1CF6007E27F222E138586586EA76C8B288D5580E8B8D
1C67406AD33743D6D8D3BFF3DFEB71B17AB6126CF6BFBAB9CFA583C22C146626
07A0BDA4D2E7B59E263685F2501A6BFC2B6A4A6E204F1EDA91976CABB8D22917
1588157B11C5EDBB61ED05599BCF271B9334ECFC4652ADF65179AACD9B69CD3C
56E373484CD1C054E1F1A932A943DA145358B9D08400FF2E4D80EA3CF483FFBF
44E7BF7F1A11251FD20BEE1A157257C03F312F529077BC54C0FC755819BF0F59
402A0A94EA3D0E37D09972EEAAC8FEEE4CF11F94103D399111368923264E84D8
453473E02C00C2C8E4CDE0FAE8771A3D5E9899DA5D51321A1AB8357E3CB0D794
9D453AC5AD0726E4CC0937BF33358AAB8D0EF9CDBE1D25C9DB2FDCA3BDADD7DC
3422AA2212D1E3A4E43B3D415CBC1903941B363A7D885F85896F516DF0D1A7CE
8684138F91E09239128464139982D639770A00885C84F5F08DF1178332D8E7F5
1DD5C45AF9CB8A6362CD7F38CC43C354FB4DD9831B2AF3FBF6C63C2901CEAC79
2006D03A9B9CA070395C6BF8622BC6D9DA9F4008B740BEE7686EDD80E7D701E9
D4F7985BD16B8B71D290D348915FAF4F3F2C3D54E585B3076AAA04763FB71D9C
1EB8DEE4B977647A8F67E402420AF34389FFB8E31318A838556E340273E8C11F
2A3F3CA462FD6E55B9F62974F613D851DEB119EBE27DD5A73357A8AA993C7D16
954BCF29C4A1D4BB8D9B989A3B6E739524DA99E494D9E1FE8EB703797B611CDD
F9B4F310794A648F0D3CD8F51792E322DAD8CD3CB42B3DCA68090F1770DABFA0
973043054DEEC88B63941456E99A756DE9278C7FF30CF6059C19A7056DA71670
06F8E12F33586A69339B06C285601749955A3AC5F7CA65108F44975B7A945882
15878E6866C71C6FE5F3B8A2F34B381DA932CBD3B1526FD5B73EF04EAD7F459E
3706C365080E5159E51E664E2BF18399EC680F3D1E61F57B055A7372EB87999E
94474F40B10445AD91415669C0F653D782346FB1723B8F554690DE30774691E6
86B507FF6933630E7564304BBD10ABEDFE59BD5D331F33D7830A44DF3C3BBF48
54E34993F396B2A26C9B943CF7EE17E7C09D04AAF09F660332179BFAC42105EB
EAAF263694E352105B21DB994694A9219744BF6FCD880316B7505270B65B5CE6
421756560C3F5859446AEB0FEE27CBC4F650A57639C89F049DD464910DBE94AC
68E2284AB110107EF5F2F4858B32A34947AB8101BB1EA2291A2279D86DB24490
50C6366CB9828EE60EFC4DEEDBA69DD07443286852C238FDE9B0D12901CD4EC6
4AC724FC27D452EEE47639B33455CFA7C43540A9D65B4EA2F769A30759960282
254410294DE7DE4834F4061BBEA31B403AC992A19CD5EC9B9E4171FAD3AB5B39
B4458A5107523F4E08FE18D1EFF28A631CF31D319EC3E94618020580F8C73887
03B8E4599A247E5BBF8F8BC0FC394F5C7111AD0D1104A9DADB306D7C787BDFC2
4F8048C1C65D2008D8EEFF693EA89E77F51F3C82E11FC73A572E2A4C52720A4B
A9F30D2A76D1427AF654F27464C3E04EF4921726D8DEB684AF037AE487BD4772
EC0F0544C6A3F4D215D72556BF0F166105014D97D3ED5846063EFBE9B12FC5B7
2207521C4970CB63D1CD107869C1B3D118BD9C2FFB1D06BC1EB7F3CE660CC126
46A3702AA878641307D51BB0BA5517EB42D3E3D50E7A678CAF1FE246153141F3
69F4F8753599836354F7A693AA74EC18D610DC11B7A13361E55B12010CE901E5
3C4364F1874CA1F69828CB3B0BEEE2B7216851EB7B3BA83DF8C4B4E4BCB5F73F
1CFFD4CA4F980C38C8094C28EB4843964B30C72A962207044FC3A839C97045B5
7B30AD7D4AC34CF949C697AFD9E896F86005E6675E9A908DC0FAC1EE9EE63593
8A1FB519783A9A9DECAF6627C1FB55884DB218EAFF9AB9C972CAF1B078729C8E
70D59A686263CF0A5AC428985318EF963654D3AC8CBE4AB83ADDE3D27D356018
4ED69D70C6CC4ED9DA348C0F47A667A4E1095EA83986BE8ED59ACBE06F8EA984
1258C3A35A39F69011C26795902DCBEE505456BDA8A8DC0EC1BE597F1CB705E1
2A9EAA132BF17D807A4318023502AF3348237E2495901C8B93EAF760946F11E3
5568982BFC5323C677DAC247BD03CA2AA73923C301E250600EF6E2896F74DAF3
1AA52B4777FF6DA2DAEB728C5A68788FC98B159126E91ED359F3C913DCCA318C
EBED426BFCB302FF0797E36A18BC521BCF0CDE26461D118533B29C4BA42F7236
1D5439E2DDB6B47CF2150EEA98443FBB09C6B9AA776C5A3F4EC4621F1BC5ED35
4F0169657AF0ED5362E89E6AC0660C6C566BF1DC2FF14339E7095742728365F7
66DFD66EB31F61D75E7660C47FD77F6DF79E683A999E6020A98E4552193A1E01
73D196CD91324054F35859F32D4FADB6B5ABDA37F95ABB068B7A0B876B121047
CF7D3603379C50D1EFFB928A1D537A11A65D64BF023182EBF11AD37903C02188
7AF1F77964C4AD796F48A65FB8AFC91E4C9EC9ED59BF5F61C5178DF4258EAADE
DC76910C8A6F03D077C8E06445CFCC126BAE8E5A2FA61BD1A5B7D276BE59E2F5
7D3E782D3173A5F6520C0FDB999D41727E015AC6030E4F5E5B654D69915F16F5
1312EA34202A883AD9A5A0050FB33C55FD2ABBA044013D3515F4843277CF4BE7
0B7BE828CC7EF639206BDF97399C7B86D2B6392CA2B5CA28A07C8C94E366E5D8
BD11F355D66DBBCD44FC8BEE7C035CE287751C11927BB9BDA9AA4817B2F73884
DEF317FC0BA878360C256AA510A068516A5EC41F5218BDD7B2440C476A9B69E2
B5515979547A56DC2E3598644C9D6DE13A77234AFC4C3B80F8E3355DE221345D
87B668476D84F3CDEAE92B62691108BD50AAD852323700B9FA2741DBAFAE6C9D
EF2B43A5F3DC4B8D59F781ED484F9F6B977DE3C292E68FC803494C66531C5FC9
D0C05804E6EE8F5297E5534F6AEC31314A6FD345E08C2477C4EBFA489BDF5CA6
370DA7ED59730CD86523D19F13080BFA2FD208DE16831F19A0B5252505457BA7
3C9A63E4C6782F6D0E6087707B83A5E5356F28ED8CB60726CFC83292873F3F30
101FF94C4F73EBB7CF5B447226242C1AB06A11B07BDD17DC18E30D3677C78CDB
090B564C5132009CD3311B10852D31CB8ED59A67175C2A1F24C10B9371F68F0F
9E33CA1851E03A597E3B752BE6DABB356F9FD56AFD008D539ADC4270ADEFE2BD
5B261F759D24181DF80433BA25FD1210D32EF8A3CA3E77206F2F56E3B04DD6B5
BF9B44B12851827300BE01B14B08EB815BF29526E7CFF98C3535D610542C1A3E
F8B99FD268652E08CAD9DDA97EE45D2E3E94B8F7E301F43042D4584697D864DC
08A13E1496DCE5D97A63F6028C6D82069646A6AA73E2EA7DB885EDAC3C044FBA
52DD243741FB8F47FF92E1F896B4663456E283FE27C6F0856F8ABDF242727CAB
9D5050595D5DD581B958DE33B15FBD99592562D31B977346F649EB701A213ABF
D3D18D9C4043EBE888499547AB5ED51E7174169FC8C6CD74761F0649097012E9
86E8B2EF6C0880C11DD27F25332D50C07B9805C3FFE9DD89CF5E24EAB85570B2
DD5A6B09C609C716C1098CB91F0CC4EFD4FC4644E3D708D66191BA9496ACD27B
F37698F3DE06539036F8FF4E252CB62E54AECF5E53BF33269BF4F6015D58986D
845ED4C3E92758B0BF3DB828AF38057244CC8E194C67DE0043104A4E33137ACF
A4AD043BB80BB3C8598F0B4F9D51DB73CE55621B1A985322F204437960105D6F
4E26C9E7E09FF8B76C9F9BCDCCF3779543BA5DC4A69A61977A87DE6B2EFD60BE
90010902B82FE79CC93846DD805E15C5FC7BEB023D2DDBCC15400004EB4B9768
F86DBFC764D6EC4BCDCD79420529F2CE8AD46EB0AAFE0132D5F48E5D96732C2D
F6A8F908FA3926976F43975CF1B4F8C7BC6053BC09DE7C6E08FA49E831F621FC
A6608AF165AE73BA9FDD139769B703AA9D6189660111E84C2DAED51A519B1B04
AA50496F1E6FAD8069E0F90AB3AB537833B02F2873AE6F2407FAE8C2FA78E93C
A05B41BA3972CF3FD531C0C96CFD79E5F6EF8F9752DE2C09AC13AEF7A3E64ED7
15E00992B3159D4955889E76A2546A25231180E865FFFE6DEF4EB8E496488FE6
A9C321EC46ADD370D59793B2A29BD593879FDC2A9F907EC79D07D3DABD9270BF
9638E9ACD81A600D5821C15E926266426E6E3A6657EE3444B3136828FE65AEE2
2E6462F0BA17BE6E11419EC34F3D6AA3C2AF9C96D3A23DBADBBC1592CAB0E88B
D047862C8EC9EDCF022E14A4ECBF23325A407484EE93CDC0A550F2367EDA4871
CABA8EF179C028CE265AA2A5FCB36E76B4A31C358883E9A2D6C3008FEA51A45D
80B97A4C43EDAECBD90E854B207B3F8239885DD7833CC508F5268F3618AFDBA7
B8EE93BCF968283FB62496302E734B722EC2C32EF1017FF7088299DCC033696D
481668CB1886D09A092CB1EEA094F7EB62A622D1E5A58BEBB2374BCFE63A74AA
29C1C2AEA762375E29F1931A004EB62BF2BF492B961F1FC8FD53FBEE32927BE1
E5E712ADB661498F8E923698CB9350BA16E6B5DCFFE485E03452551422B0E58B
17EF19971A7DD64EB946457C19ABE68C8AA00DC1B8576E57633FE7744D1FDA40
FFB12997899830EC1AF7103BC7FD7C7F5968731644EFFA6F53AE854E732F0FC0
C486CB4ACE06EC898B74D35D05D4E72B741E44DE2E798B0B5D8DB5695BD6CDA8
BE600FE363127ABE344DF533A3EDADE146DAA7D7FEA3C40988DE181A968F87D3
F0BB0C8EBA565E21C6A3B3A872B8547CBC54F294618C3300D67975833AF35892
4ECCEC2431C688C72F107634050DA44BB90CDF604B1984ECB3203F45393F0BFE
F8702005585576FD47D454A78E50ED35715516E89E6C3A89FA81558DC9C56863
91E90C4B2BC76A20BBD671CE2E22EA24BBEADFB78DDD598F3C766E57F943C1A5
AB31F9E44C34167C79C0A234BAC36ADE6C392F60DD9F3B0AD9C3943AD8AA57D2
B15AE4337D7ACC9D4FA2B69E3418DE4E24F141A84854B09E6C33D55D101AE8BE
9713E0F5D7DB539EEA2431B980999CB27C0E1074588036F1D00A8EDDCB51B34F
9852782E09496BBE78F302E022495DBAA493C7AAB226E2CDE66BC6BA989E0A3F
243B22A761910E19040C82E8F8B5989617A4295210BC23CA29818E62FD4B53DB
8D9C00C0DA9FEA514A53144E33F33457A619A48B895148E53F8ACEC75BA27111
7246F8C1CD946F674D352B637B259C9AF96E15F65FFDCD58A20DAB891238A047
F80AB353B59775744B5E59B7AEB9DE45FAD87E083C9A7108A7B6C09EDD6C6AB8
FC492965BB3E18CA4CAE95C2E7E4A259378A4DC79EF0E6D3ED6E807D6D2CF40B
A59F74B5A5AB3A882D401B3AC9118B9E1ECDF9D3F98910AC20F9E676B710263B
D46377567ED5A8B308F2162B35C4FEE3F0E41BB22CF75663E8AEC4DCE0D8652B
992006845B86A1CD63CA1861EAF384E45C20F866B75F079319FC03487AED4FD8
FDBA1434E91A8A000F886165711383F0239144A1452212DF3516D2B5DDD148B4
DB0FD030640E5A26B7324B023C22EEF1A1136F8AA7884D97CAAC38545D307DDC
3E595E5257FEED64D28A23E504E48CF067EDF6FB10E2CD03C6555858E032A249
343A454FF728953171FB809A44712CF382CCBF49635B8BBA466D64362A37B215
989960F307537E279BD51B8C4C640C7888D1723F35BD029793D9196CE83B8AB4
AB1DF5D879A37599638173A4543C6D1478FF6C3BD2AAA11662375CCABBC2F8C8
8208EFA96315115278C0841707CDEC01784DF7EAACE39089B89715AC669F6E11
AE0E28BCBB8EE903B959744E0EDE2425F94870D9F944AEF4567744E81F07DAFB
59F6F505E039C9E20DAC86DB5E79D74947ACD1C8C249A87D7037625CDEF54599
1B705744FAB6C5C7E92848673B57A0F5FC02644704C711D40C6757E441525F27
A2AD6EFB20500FCD309927247F0AAA155C7FB2C50CEF36629540A765A0FCC793
1BF006ED8BD85A3F87C3C0FB8AE7F8AD7DE82F63989EB5B180C4A9DA5862DD66
5F719CD72FE472720F368BEE463AA45DFEB27A2B91BCFB3D65C86EFE155EB84C
FF3A4C09CEFDAA184A6A47148C4C90A06BC2521F9AB5BBFA9DC4DEAE522EDA53
3433808BFD25F35BB2D4E57270E7A752E0D0B6DFE4C52C1FFD3B6CE08FD09FC1
03F786F23E5DEA88BF8C3D486939F75640519FF7A7747C1641652A470787B541
ECB70D65D5D1F9D69B8CE94F78EFE822D7C0E52BF69EFF9B25CD83DB34F7E571
094F2E22E713746DDF62065DD9F4291F3C7A45E689EC346DE4FB6642BE7DAE36
754AB09857A9A43F8335F598E0F2449C24D1A187354953645171438D9EFB3890
F83A368536A8450488490B3A656582CB610AE308E1F4342C73AC8AEA5231E530
4FCB4607B545858B85E8EF480F74ADDBB402CC323B2F269BCBC6CB29313E4465
B0FADBB0B7A067C2C991AA84D93A28DEC63C1D7B09985CFA04E38CA23DF97C9E
D81E2FCCA0CC19C2C42E1AF2D2A4C3ACEFF3C2AC1FB4704FE1416FF88971BD78
1F1AE65F9788563B6CB5B2E99D4B21DA578A2F329DE56D4DB1D56B55576CDBFB
62008F484097F114C6CD8AFB4F447DDA8C9E211B5700F60564E3921A89627BCE
D4BC543BACE2F4464BA04C34297A618F571FCF84A685F02C024722D96B8AD24C
8360E8F1EE69E328A1FBDBA5ED26D69F340B93D3FC36B529EE0BEEFD330533A8
892F95D69944B73D72F56EE92D4294FA74721495EF4BF9A7B6B94064E0A57902
4D94530976A9F9F0E3B92B29B367186EEF544CCF26CDB6FF387A7ACD07972953
EF2BD9F4907346BE1A645AB2C0950419BFB20F6E5CF6B4A3A0D84FB462753953
1722A6E4C38AAD20F6A33D254D3C92B683153352EDC280AD855320C2428D8624
6BF38EB196928DD448C9C8905BA00A90CD6C395FAB0A37FB5F82C2C8D7AB7107
38224FA1FBC76DC437159F4ADC7AD9F8A30F04093C20CB707B6027CACE5879B4
1D77B0A0E2B6B50C712B3EDCDEC32A4A89ED435F4F843A501E9288005C9254DB
867A41A9732D9E4A308E2787559FFBBB8A7F9CCEE4DF36678DF62AFF178ACE6B
B804B4AA902D338584C06E89E95E3AB0DE1E91D3D020A4C51C8BF3ED9AFDBCA0
67F42A8F8DC9246B6F1211C5EA31994256303FEC48D7D5BC78DACBAB513BF569
E22BDE13F0A9D5F9164A9EEED4711B8869289636805441D61C43BB7B7719912F
F746C851A41C3FCC8480E0D6E0B313BB670B891DFA20155E373A3D561C6EC7CE
0046621CD37445BCB456A55D9A63C2449907DC67A63A2F2398B23F7497912A01
A74173CFF7B9F0500C6DCD3B8D1D302CF6E030ACDF4AE795CCB4D52ACE603161
8C6F5EE8562CD71DE67CA46F61CE97C83CD13FCE4F02C6A37A93CEFC172E97E5
593F24F077E76F86125E3C133E7BE853C4B922FD8447D7DE40C795061B608FFC
38DAB41F84C8CF1DD090151CA684D48369DDF51BBFCA48BF1E481E813E571377
B3D358AB127B6BC7E741F24E072F6F2F7C605F17E6D5E8CC532B7A443EFCBC8E
6905A833DEA7B2D37BF970258BC43963F03AF714C1FE7A559E33136437F8D5C7
1334DB356E04F8F24FA8CD08AF8A5B194AEAA1FCA2BAD67218A3B6A1E54FF7B4
5B482A7B6D9575F45562C31A1C39228C7CBDFC44D8A501951A5BC9286113A6EC
DD25DCC586036C878DD1BE69CBE146FA878774E8A91E90AD93884A3A6BEA0A57
050E503A8E70B0920D9C73DF7F493C397E90917B9E7835EA48B8E21ED674192F
B86CA91BE6D13FF69DC60EB766C338DCAE2839884661EA71E8E4D3C14E7FCDAD
CED92EA71FCF0C64B2B56941258EA999694139A88CC2487946E5EDAB7EDCA0B5
427895EFE91E54EF7AF617E2961B4C4A1DB600C73B52FC9E43FCF2575219F1AC
75B972664F23DB44FEEDE983E7B9B51D0A72506F4EDF5736FE8401861C27A6E3
4EA00836188B3D1A56A91D684422A90FBD4FD2258CBCEAD9C39F8BDF2D77ED29
30E510662BE93274F628A2D34644157FF06A1F08C550AB21250DB63AFAE246FF
E34A6803CB35C8B988AB7B4AA3F37653AD17A47499A1A2E75C300104DB296747
21F4871F2172AE8F660A2A93B4883DA220960DA65D68349D5F6C3C5EB1E61BEC
22F5BECE5E8C3CFEB14653C230403C63A4F56C90623054D210F150A949DE551C
E8428D4023FB9023B499FB5E28F6A3BEDA834176D301DCAB728B275360B13744
FCC87BB9DB69FD36D1E0C6C8E6D422C698ECBE558EDCDF6F1D802314B76ABEA9
901649864DC3DE3397EAA2F9EEC0DCEB5AE860D49C49E1F2B974E9F268935A42
8A3E66C9B5E66DC10518B2AF6B19F339114259019D6B2907559DBE1A8DAD8F61
72CAA69C9730
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: CMBX12
%!PS-AdobeFont-1.0: CMBX12 003.002
%%Title: CMBX12
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMBX12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMBX12 known{/CMBX12 findfont dup/UniqueID known{dup
/UniqueID get 5000769 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMBX12 def
/FontBBox {-53 -251 1139 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMBX12.) readonly def
/FullName (CMBX12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 65 /A put
dup 101 /e put
dup 103 /g put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 115 /s put
dup 116 /t put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2D43A151FEE81296FBE
0CF37DF6A338C826464BA5198991445EC4BE80971DB687336AE8F74B516E333D
2D8AB74D362C559AAE6ACFAE49AEEF4F52E28C869222C1301D041E7A0BC1B608
1BF728EF9E98F3A12EB2714E7F16B14E055FE1FA0EEFB058860ACADEDA9D0E4C
42E3C6F1E4869471BFAA3760175F3FBD842755A9D7847EBF605F18293B42F557
FBE2715002669091BB033E1AAD657532F34F7C66E4F04D63ABB07E6CB9D9AEAE
78EDE8B79DD9BC87A1FF445EAA05B5572BB880E69F4DE1F82D7F0E9980AB0C18
22C448B0B1722D3CC33C56FF287CECB80658B3AF5E7675BE82CEFF3DAD5942EE
A03C955FF979E41E54BCFB5316A9AB8945C403A73180D0961416EC9C92F49811
4B91BC4C788392994587517718521E416D469F69952149FF7F9224377EBA1065
4A727BF806A112A7B45B0A1BA1D5A23683960575368D9EAC8C04753BF7465AF7
95F25C258C63E4FDFFD0B412FD381946AA38C0B961652BCEC30322C47BF4755D
9F91880688AF066E32FFB22E1A52DE741307AD3ED830D6BAA1D1F562919666DC
5E8FD9862AC8600B0AE0BC7FC779252AAC57248744ACC8A8AAFA836BCF09B0DF
9253DFBB1CB77EA8A59D42D1B18FF25E9AED72FA62FEC3F126F030F5D7DED9C3
CF60FE890BA4A48E39E687BFFAEAB96AE542A6387F6624486037C8924002A511
BEE5FBFD780AC1D4BEC3FBC47A930BAD0280D444259528B6C565DE11DE36BB65
9BADC55C1EDA1A80458E98896D782DFB5C137897419602809F9BF8CA39F00C68
EFB9E076FB324C2963F23CBFED28B9EF70EAA4E4B903225D1F199A7162AB239A
D92D71C18B1B682D04C6A48926275BCB16D413B2A0E953E1257E0B12D8B717CE
2EC84CFBC046A4338A69F454A469B12118E562B4F56C5FFB3CA5D357513E6FFE
947A564B229C7FD873057D5C7CDF03E958294A1003B37D8DF565A70A00A3734B
0138AE5277D383D10C2BD853EF806D3CCDC47739F0E374A3DF3B63638B949ED6
4EC25869DC1C0B1F4DBDFFCC97382841D8F10F3635C792139A1EC462FDBA379C
BE0990CA2E70FE73137AFBBF30CA54954D7E7377CC50BDD780DDD4C7FDC77AD2
F3EB1169F14A0041F18160F43C24FAF556DB5D621709FBC544CE55424F7446D4
6AC07A51C8CD5161AB0AD5084A96FB35D77F1CA155147DEF8D7A590EA6939514
D4A226588295CE0007BA8A550895511C8D80BBE5CDFB8A50D249C3BDCA974415
F5557914A9B805782F399E4078DDB6264F1A49A9A5BA45E284A5196E9828EBA8
481D357B8D9E6ECA631A6204439FDFACE7D7E6A2392726107CB7D2517CD19A24
FBE592C119626DB221BBB635B6EB84845C16A9585282E34958B961F4A543AF9D
419B6A9105BF185FC767712D923437BE08A9C0EB92AB6792DBDC671029B6FCA6
7F717FCE379C0F3B51C6CF042A762ED04898FBB4B0105C3C4ADDDC18C51BAA3B
70A93666669547081D9246732CFF74C83EE90DA17F5B4F8BAF47FE4D81590988
2858C9B96071341FA0A0D23BDD4947FC9BC2297913CFBD4FD6CA4303AB3179AE
0203F1BD502065F90CE9BEA3B52DAFE4A29446082EA0E6B1D7AF1F31D0AD02CC
9A7FACE2CA86E5FE0F6A425B28A5940ECA306891CECDB3CFC7A5BBC76B5D9E8A
C754379ADE80B4D72CE493010317BF21A0CF4A0A55C1246218839DCA3F4D626D
1F4161D38F54AD5142C1CEE95C61D8BB10FAD4B772F4955777AFDE8AE5A837C2
A2BBB11D0BF5DA2E63D0B75ED421DBA9C789B281B01846B65DC572BA69591969
21265DB722AE86BD8CAA3D887C975A617ACEDDFB7AAB341F47532AC0F354A530
7662C089DA3939588774FFA16FC4A52555DED6D6F51DE718BF5F345C23C90198
17B77CB8B5D53A5CE7A79F3E286B6A59F3F6178AC8BF15C0A15C1A8A95D03B60
30EBE53DE328CE085CD9A1D49C69AA299C5B58B24334A546F6E274C1B534DC8F
3289553F560C2F81E413ADB92FA0E7DD1C2F39D5FD268EBA97AB7335ECF28257
96B4EADB7D0778706CB41C7E9C882760E7670936774A1088FFB2011115FDADB3
B69EBD5108760762521C25C968C3E282DC3400001AC8FB1EA27FF643E3025950
1D617BB8BB321281708E496277E11DD3AE0023DA9F25AD06B39C7CF527FED27B
57397E88D3DF70EE4FCCEFC8A0927D6B05517E571B3E70ECC99F3CBA32CCD4DE
B8BF22626B6C94FE65598A88AB90D238461EBD9A098DADEA4091AF1CDD7560EC
8E1B9BC2321686E1759E6B8A270C8CB4A254F7368039602EAEAB86ED21CDED91
8F2DB9889F46981C494C7EAF5E819B91C129F0740B8002B510014985E5791F59
B16879CC6521D8E9F1C4C1890AC85A78022BE614BEFF318AB2616F0C3F02405E
BB425D1555472A2642BA7686E431DC3FB8A1688B76660D9957C3FDE8D58109AC
21B1234C9DDF3F0FAF93BCF7B2F88A001F23162E1A13E5E9118D51B485B70A91
D0CBC39CF44413FD8686D9030782DAB58064F5B987E0402AF5B264B17BD31BD4
FDF63951BECD73ACA6138854EF35B062D01F33073850D9C09A818828C581241F
A625AB3638081DD0F00F946BE5450D38489CECEA4E66B4D85CC8AE0157E2AEE4
A22A9313829F24D573101D84CC1784D1CED7DFAD5DD966601370C6CCBB723082
A86BBAF0A5D867D0D2E3CA16E14E5109A29EF02649C47E12E88B3B397D65CACA
DEB9940B92100744D686066F8250FF30E5F13D81428EE238A2E4E07ACE0F5C38
7D79D4A336D0D26AF9C2B84088ED8ECDF94A1E3FADB45AFDAB46CAD6FF950B0F
07AA2CDF82374DA76C56D29C80138841EB13F0D02ADD32F88B23E282ECC845F9
BB9AAECE9CDC644AC2D49577A92307A83A99434F6493156DF25DBF0FCF2EC21E
8C50A312C3D19E0609C0038554CF4FEF3ACEB7A833FD54B06EF0D617C2971C89
E4C06075B09B84A4F78A82152B9A9C540B1D881313C2C74F20ED064A9606EC2C
B56D7BB4797F1EEF4A9B13579CCF311FA4A4DFA62D80FDB7F535CC6526D1AAE5
45C008EAF024B48C377522F74D939A475970533E645B1BFA81997549AFF26F67
2AAE6C2EFA357DB3B525276EF330905688777057F4E4CBF584520A534A8587E5
5A8360891E75A15205E8ADAC4A4E5A6E27D0C4A7D492216E4BC023AB027F37AF
A8DC7579BA50204D5F45A51460C5BD8A5A7F87668CA6451137F2F59E117BBE28
5C40820882A5546FA76F0CF49F8A6EC445F0647CC3227C400F56E7E9B84A6975
E85E243CC1666DBAFF4E07EEAF3AF71BDACB30DAEA792F2B8504CAB071544F01
5D66243D529C479D276FE22F7E275D9E7FA9C6EECA18716B2F213916E32C1D94
6E32397B41AC6779543218E506569E3544803BBF9B404A983EBA62A494187B30
8D3DFA4E1237A2E5E08224A60492C09ADAD8775B7CDB830520829BA164209ACB
BCDEB2D574CEBFB7AE4BE72DF4EB1945FEF2458761AD8DCC0D378AEB7DA002C6
9C14A665DAAA532B0ABA98D7BFB5A6151FF6703385AF7AE8FD315A492FCCDBCB
B825707F9566B3B4943A3C61C3DEFDC31A843A2D67AB06891F3E110DD8C73D3B
B5E4151B51D9F13905D7D94DB9ABBFCAF35F43B6EEE256B1A80ED6D1739D8D5E
8C767F6F0E8704C5345D028A2A6DAFD9BB7AA048B8B895FE9423A7ACE858BADD
595CB074A128DAFE08FDFFD6BDAC0114159A702FDCBF8013804B0CAEAD7AF38E
FAF086A3248AD4FCA1401A85AE2F72E3E6956DC0996FE8ADB18F89B14A208A15
13F81AF73D0DB72F78C4DA634ADE3C73756CAE6AF2E149C26316DFD93370BE1A
FB4A79F77A67C07CB0A53C78367F21661D4AFE9E27328E077B522B50FD9AE2E3
DA087BE481515B5DD7BF894A96A84A6C78874100505B7DDE1D22EFCE8D58B3AB
313AB5495F72E2CA4E6AE22C0CB854302B9990372F1661D9F0A517F90686F248
C5643008B3D29F7296E5C8FD4049886662EFDD4106E17C879F5D41CE84F87E89
F6A3117C968B95A35940CC29C43E1E0DEF51C1E46B676301F40D59615C3F73DD
DE37B72FF7105DB84227DA5241583272AB1C3CD97AE11C1EE98FFDB5E5F44844
8FC41BEA5C54B26341AFF6830D9D0A5A2901B0653D8BD0746838194D240FF753
E99750D3383373F453723D86BE97B571B8B84D8696089B5CFDD53E6C562A2197
A8C4FB0CC690C27761A816B441029D3D306245052E0C41B53025D8CB7267CFE3
C17FDFE348E765326F91AEB700CC49162DF748171214252CBC821493DD01AA20
417D66DF47EBEFFF3E9BB2B0A2BE7D9B8C68BD570FC2EB0FA54CECC318F04C43
19598BDE93F2F13DC7847354C99059AB20593EE51E94F9D4E9241869D605AAF4
9D9B5FD88C3798A039A67993C5EC68B6326B132E647F67EACCA7F7AE7F718D85
12666E90D7C73EF210E344964A38228B236679A2B18F5E081234CAA2458F8D83
3F0CA308D19663CB12EB904076EF88E556407C33C9380A6A3D68A9EFE65387C1
A1BCD2D26DFD2AC0881EC30E81C0A4E76C244A2BD822EE88C4A60B480D107E68
90E419A1F512E865BA922A7830909BC2611A80931CB2E9344529586726614D94
3AC5200FB9FF68AD9686506C5EFA8788C0AD0251AFE7F95E84683380CDB421C5
B1A783B6D5F3A6BD1BC1C14B363DB01C87C0796DCDD5BECF41A1A9F43183CF6B
82C2AE49F0BFDC5DEF7729F2E638EE6EA9E4D059EB9BB1B992AD8C82D501A550
1BF73CBBFE740179B54E193E84A55DCD61B343C1852780FFB44248FC9426AC94
AA2B3FE20FBA30F6C4D1E0FF3EDCDD8C0F57CCB50CDB0EFE2E04A8927E239C1D
9B026C7929BB48461D4D695FFC766C8A0E545B1BCC2AA068D1865333108E7985
2D93F9B00EA0A90939D0D3840D59B6CC0CE2C147B2E1A9A4F14270FE3ACF51D5
99F7349106165AD627CBBB0ABA01ECC6D3A14C1DC1ED23A9DB9865BB4396C51A
31ECD001EAC94B33C34E29C5611148EF3E55DD61813470B8F3CE32564C749414
3C93C77EA5A3538A0B5AE3FC4DA32813B06772E0E48E25BB39F3F6FDCC077E86
F86FA50E18FD19EB2F37311CE87F18F3BC85CE7FD71CA92D5C3264E34E04A2E5
70C79D99F54D6C6D9D527AE45EBB48411221134587D2253E7C8ED7658EDCA34E
5E768DD14E0200470F73C44D006CE8CB35DE1CA3EC10ADC668B0662A7774C891
84EC95A31DD872F0728D9F65CA80940080E04630BE4DEC77A2C49E3913C39978
BF145F8832AF2C4385EBCDB15F9D32C22CBA0CF950877717D6F1591D7C0B8047
8C9BFCB16AF7124ED83137695F3D69228DB633053208C29E0ABA1B06A7FB3EE7
5625CB44927E2DA6E038A6E62DEBDA2D96A03177982D8FA33BAAF4426E05F4B7
9C1748B3FF7691F9888E7FF864A10B9DF761A41E6B5CFAD2BDD7E1C4924AC97B
F4B352705316DD1A58637CC12D71C18A5CA691AB2AA8F171590EC24582B1123E
94D4DC587D8F99E18A711776BF4013C96446BFECFEE4C809EA94B169088024DE
0CBD20199A915AA406F0BD5F3D63D1467C49B4691AEBBB35ED6624F2D7BB74BC
E80FD92B9FD04DD9C2BE9B6FD29EC7EC07FAB447511C61DD299C783BC09AE2A4
7B3CBCA6A20C6631D06D0B2E2482A50612BB7C29B7E7D0A205EB0E8436702581
596BC996ABD58CD8D5BAAE4B1478195CAFF98FE0141287296C4EFB8D2E7A8442
F0A3AA9F9264329982532295A176BA1867EF732BBAC49AF485D9D0F7130F617E
7F7DEEF935874D55A22240F8EDE4F247D5F73481373A392D40A8076BD91079E1
1CE5998BA13D48D56B49A92B4A18430E316405D2E2E391B496A1934671FF1785
AF42BA3B2D14B8E04014437FD194455C50289DFBA61B5C377BCBDADA48E82DEE
4E70EF5E9DC03064907BCB8BE4D59DE069FB0C0CB140DA54708E630767313F9F
744594AD8A499CFEF733E640A11FD74E46A749F9C7D18D49251BF85C6EB4668D
67598C31A8F90922FEAEAD4B83B6E7184567DC798E4BA1C4C9B3461A478D63CA
054F13B502DACB674EB49D6BB935E5EC82BF99FDA7D47C581AD7F940DF4FC6FA
6C6D25D647033AC69505F0CAC58DE99087F365531A6283CB89CB644688963C3B
8B2203A94294E58739EF23C7803630A1F9121D62BE1977DE2F41687C8CAF87FE
CBD7AD3B98E0D95C8C6E1A7CCB0E09465AA874DC90A0F5DB2C5E7C130297FD39
EFE63B0350B5139D09E6864D22C3F1150B29196E40EEF9723E71158B7ECFB8E4
C426FEDCD439420B7F1C251FADA347C9A2C49738B5A17922E1EA93CA7B125B76
57449EAA9C1D591CAD327D0E98EF2D44D614EE9ED49DD31ACAC0B956620B6BA5
5BF6D08CA7541059D5ED2EF00AE2EE95488F5645BF6837D9241C0D3959B7580F
C9ECB2BCF3E65C07D52EC9CFB21C11CD4C883E44C173214C900C44D2E1E43DD1
CE8DFE3DA93C38B548BC4EC46FF91F30CFB97525E1FD4E77686433B20BABF8D2
848C1CDF1BCF185CFD7A81D2D4BB826E837E2AF35CFC4F419F698DB0C43E9F9C
B0FB628AC9A3CBE9B1FF4A067016E70333E78B32AB2D89C483834B31F5808FDB
77492E099F1504DABCA5722C7860CDCEDB2DDEB512FFCC7D287F4945FD711F28
87BC3D36173566B81FC2C1290C717A09697DAC6072408E20926D39270121CE58
3EF97CE12EDD7F87F2C8CFE36C3C0400869C0D813B71C425343EE0CDF717BDD8
409D5297D0F8F7FDEB0257C0A391F5635E0DB1116058942FF3E7C94D5F2873A7
A3B0ADAFC3835AF2BE474E6741319BC6695FB37F59AEE388F81F6E66F910000B
72E6BA7531B4378CEFEEDC79CCF4947BA1703823B5AB4F4AD73D9615C66C489D
99D68E49C9BF765B7FC547BAB9640D51D5A7A2396507AB5A4DFF3D14F52422CD
8FCFEAA06A56C6C7FFCD29C9A7A59DDD2A909A9363FE5F1E9629616D25ED38CB
E754C059E4379318CC491C3B1A90128693AC53F80F8210FAEA7EE638902A7D3C
82B95B3F5AE340EC1B648DBB9FB679D6E80B7F426D8671FE7136D97F51E2D2F3
C9CE9183E4061CA40091A2A70DBB9ECBB19CE3F65ADD0FB346B54BAB182E2CD0
EAF4C0F402C25573FB344EA771B297BEB615FCD0595172E84ED2A62FF8962634
23C19076C2A9ECEED5135994EB397303A9619C76DC55E032DA83FBA441BD484A
59F70A5110A8927F6239A14D4E223E189A5462E4A92EAEFFA4B961A2A32B320F
C2B4E8C1821FA67A655B5042C15E4DE1FB3652B55078DB123573C4E986B19DB0
1C5131F3DFAB271C30A5476B4A19D8FC922E31879C34BAED94C07A4841B8209C
403369FB8E842610D1EB4662B6171A4465FD0E819964F62EC5B0ADC92F08CF90
1DE0B410FFBAD16F6D355E8AD72CCF67961EDB6CDA82398021007C2D0462E893
75EB0710AE4A6CDD15077C9DEFC5774EF4A657734D703CE42174259B58E5277E
0DF26BF59AF8D1A3E7DC12E3C12AA4B67CF35B19962F6950C2020B698D971B35
82FF84E72F72FBB0C54A112BADBAE6C4CAA358BDE6A705AB59332C3850CA3D25
C7564499BC1319121CE0D93218210C68080AFF33420E3CB3A48BF9EB66BC07C8
A79D8CD8E78C200FF7CFA3DAED0B9E87E6141C88B436D8FCBA50AC195FCBB9BC
9512B95FE3A37FFAAB39850FCEBD4D50A243EA416E73F53B4B00F3B6EAE0CA06
0693AAE0FFD5C119D11E5D13743E28D843B0F2EE315A2ED05A510CE53A2D06A7
0C076D4B6BC2B6A928553E7F0FD472760167DB486A777259FA74245EE37D0125
47314DEE4B29E5D22180BDB1BDA7D33406FD340DC3991F50800BDC90F7678EF1
1064986DDA53A77FBE2EDD38E20C41EF86CD50E8EC167344A3F3B3C3BD83CD80
87BE64CAB702F02390E0832CB73A91B2F72D7F7F064ABA3B660D3B72A6F7CB34
9F2896D5D3D5EC77EEB17447B7E040DB68404DCE5BAF17C2ADC810A6E3532F63
C15511FF2BC0FC8A760AC4478D81030C8BDF8ECD06E78C2F2840AD673F7B013F
AD9E6DAA370EF399D807753D65A7EF4D2F0C2DABDC55E24BCBAF683F6F0C8517
064C744788D9A92EFE322D102ADF86F1015E173831B6FCD7E5F2B9033B5BA888
C5ECF3863E6897BAF1B2035C3CD0B1346A73B83E887892FB572AA98780C18A09
74DA54A9BF1F21A602FBB2D305FED3E4E4253C2801389825D80CFF87ADC4820E
45AA88A4091F4958A434C8BE417256AE4715E00342F56B5982A141A0791DB288
6DA8E516A908E01A9F3D979850BAF9DDF7CFDD1E3FF469052323FAEF623975DF
4D2653796C6F7863A04BD88DA80181A5B82470646AB00D9986D7CF9A59FFA140
5ABD1960A9689999106268F27AA98D1D2600BBB142441035625325B5BF308D83
A50C63C0634B04FE4DAAE916AA103B993F7DB86270E9F4E99ADCF4514032D4D8
9CEC6CDCC334ABA9B45CB359E226B09ACA6E525F9A017A34A18A0AA7CCFEB027
FFCBD7D6E5F13DAAD1BA58D863CF024CB7184EE6C66C0D3B9B31A1BD3CB0B41A
60B527B9CCA4EF149E5D934CF5B6DDC6BD9B0BC044645FC80A56B7B5C6C10E06
36A39E0B41B21FC3250AF5D9CFB9C9525018F49A35DCFB7B7AB4B443C6467984
83B95731946EE8FAF7724A6CC272A7E9716A0DE4725B124D557C6C5FC6403355
75C69A9E198E53D83A0E9F0752C21AE0758969E635B5BA499BAE1BBFA58153EB
12FEDAE3C21A39D3D9CC2AAF23605124C816AA34B0EF918E405CBE18962C10EF
033442B29D8169FC191CB3FE5CEDA3D53537F084A31083B7F17224D03A86EEFC
BF57DC4BDFA256B3FB8F1E0732CCD9AFA52E5F09D1FE47205BC10994210E380C
62444C925ADBF30568CDE1BA20E63EA40E33AEE9BDE81686BF15AFC3237548A5
434FC6FB9E0FF541B90DD631BB12D8BFC2F22A82D86A7CF4E8CADC726737ECE0
DA1C682C29BEBED2D17AB82552A05D4EBB1C26EBA7F19F1FFB9CEB31090BCE5D
66381245C3E89E115D42ADE4709672695836618D3B8A65CC1AE5190F1A6F0870
6314AD1C65A4E3EB64EAF2AD8B50367927E20599D07DDB410FB5B95112D4833A
F80150A5D9F444CD17505863B8EC5D4BE85D6184EDF30435B5F385FE7F0BA2AE
C75E8D6C77DA3BC91BACBF8172991BA86E9FDF407D4CE5E330A4360660E5CE91
920754516C919C8BE549E35A17FC41D6BABD4165CC59619DD86AF4548D9FCC92
FD8B51FE21E05EE721EA49173C887C09EDEAACC879F7E0DE2FB00C535544FBB2
5CC64978B89A87BDBE9BCD73DDE3E50CF9DEF3E16496F12493E73DD608ED62FF
170A761B3D5869246EFAEE84B9F772E69EEAC39F5C83C6E2CC906740BB9F00C6
A4560859555EE689AB80E0D680C7BD5FF816F24F9562B20D34974F3E0D71BB9C
24E5F5C89D0BEDF8FD86DAC33D63F21CCADD8103C2696E5CB043E267F293E5DE
8C0FE9AF3FE8D7B2C1784BF4724A0CD2D45DA175B85AD30FE7FCEC4BBF336F72
AF512C2EB00C27A3CB4048C5387575B072C714204FA4158F1FE950421437DA52
393D56A4C215FCDAB05DCD0588E8BF1E7960FCD2E4D39011B0333B3CAEC90F5C
B6651DDF92F69F2AC500792F89EDE170CD866141E0FD5A73ACC736173D5D9EF4
C45BB68F7AB26FA9827B3EC5311F412329AF729C96A02218B116F2551C0E7C8D
779E9A750E20CA5C49B382DDA970D4C024683CFA4EB3069071115C3E6F3E149B
A85C9EA79740E235A0A90284B8D79C88F23BC942D6A33787462593FF1CED4C3D
0CF7F39143F1EA503796F31093EBC08CA36B906BA66CBA02937F54FDE632721F
73756B4DF8AC96E6B5CE6FA8B9368DD27F3397BB3A88BBDD4935A8660C90AC22
A1279402E950D88ED4E88B804DA170E391F30D64A8BD7D5F11A4AF8393F652BE
83E8B60B622B7FF11119BA84FEF57A9206B7B45678A1FA223D06C9E1FBD3E38D
4F0ECA6B2D9F3A18377B0EB2BB4DCF55CC6F15876D548B9672438A2BF12BD0CE
AF264F847FFDCDD45164F084910E8BD0F1280BB2E8ECB863A3E5753532D4AF1D
462E582FB64668C664FD36E86AF25AA8A629B4E9333F4F053F18014E1A9100E9
B149F9105EDC13A0F4B21E6DB62507808C725E56AB0EDBA1B56BB945C867F122
5C80E99D71D6D1E93B7C2D9BDAB7F304B4DD2D470F0807969053094D17475DCD
BC55363D7000EF8382CD07F6B1228785345C43A9B797DCCA09D845EA60DC1AE5
D3BF1AEA836FE370A7DB4798AFB326A63E12DEE3C700B5ABB8BF7676DA4C6EFA
4B615296B0B0BE449A7EF6288B5DE283FFE4AAC26B4D5280EA9DC684965D3AA5
2820B6788BBB0E2A917EB8A2F7ACD9AA4AEEEB71C7BAF9F5E6A140EEB0717A8A
1652F097A0A326B06ACA317F0D709EAE9BA0527CABA529C472DE4438A2685E3D
12C27E3E85E344BE1A5C1240611D3F1690FD167A612C04B2D2FD51C1ADA08C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (hw1.dvi)
@start /Fa 132[42 37 44 44 60 44 46 32 33 33 44 46 42
46 69 23 44 25 23 46 42 25 37 46 37 46 42 7[62 62 85
62 62 60 46 61 65 57 65 62 76 52 65 1[30 62 65 54 57
63 60 59 62 1[39 1[65 2[23 42 42 42 42 42 42 42 42 42
42 42 23 28 23 2[32 32 1[65 1[42 1[42 23 19[46 46 48
11[{}77 83.022 /CMR10 rf /Fb 133[42 50 3[53 37 38 39
50 53 48 53 80 27 50 1[27 53 48 29 44 1[42 53 46 6[58
2[99 2[66 53 1[72 13[69 1[72 6[27 11[27 32[53 13[{}31
83.022 /CMBX10 rf /Fc 139[52 53 4[75 112 3[37 1[67 1[61
35[102 15[67 49[{}9 119.552 /CMBX12 rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
150 0 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 0 a 150 0
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 83 x Fc(Assignmen)l(t)46 b(1)150 385 y Fb(iqem)m(u)31
b(Steps)h(T)-8 b(ak)m(en:)p 0 TeXcolorgray 251 671 a
Fa(1.)p 0 TeXcolorgray 42 w(Op)r(en)27 b(up)h(t)n(w)n(o)f(shells,)g
(call)h(them)g(Shell)g(A)g(and)f(Shell)h(B.)p 0 TeXcolorgray
251 837 a(2.)p 0 TeXcolorgray 42 w(Git)g(clone)f(git://git.y)n(o)r
(ctopro)5 b(ject.org/lin)n(ux-y)n(o)r(cto-)o(3.1)o(9)p
0 TeXcolorgray 251 1003 a(3.)p 0 TeXcolorgray 42 w(Change)26
b(extension)h(to)h(3.19.2)p 0 TeXcolorgray 251 1169 a(4.)p
0 TeXcolorgray 42 w(Be)f(inside)h(the)g(lin)n(ux-y)n(o)r(cto-3.19.2)c
(directory)p 0 TeXcolorgray 251 1335 a(5.)p 0 TeXcolorgray
42 w(Mv)j(../../../\014les/bzImage-qem)n(ux86.bin)d(.)p
0 TeXcolorgray 251 1501 a(6.)p 0 TeXcolorgray 42 w(Mv)j
(../../../\014les/con\014g-3.19.2-y)n(o)r(cto-sta)o(ndard)21
b(.)p 0 TeXcolorgray 251 1667 a(7.)p 0 TeXcolorgray 42
w(Mv)27 b(../../../\014les/en)n(vironmen)n(t-setup-i586-p)r(oky-lin)n
(ux)22 b(.)p 0 TeXcolorgray 251 1833 a(8.)p 0 TeXcolorgray
42 w(En)n(ter)k(bash)h(for)g(b)r(oth)i(Shell)e(A)h(and)g(B)p
0 TeXcolorgray 251 1999 a(9.)p 0 TeXcolorgray 42 w(Shell)f(A:)i(source)
d(en)n(vironmen)n(t-setup-i586-p)r(oky-lin)n(ux)p 0 TeXcolorgray
210 2165 a(10.)p 0 TeXcolorgray 41 w(Shell)33 b(A:)h(qem)n
(u-system-i386)d(-gdb)i(tcp::5514)e(-S)j(-nographic)d(-k)n(ernel)h
(bzImage-qem)n(ux86.bin)f(-driv)n(e)358 2265 y
(\014le=core-image-lsb-sdk-qem)n(ux86.ext4,if=vir)o(tio)12
b(-enable-kvm)18 b(-net)g(none)g(-usb)g(-lo)r(caltime)g({no-reb)r(o)r
(ot)358 2365 y({app)r(end)27 b("ro)r(ot=/dev/vda)d(rw)j(console=tt)n
(yS0)f(debug".)p 0 TeXcolorgray 210 2531 a(11.)p 0 TeXcolorgray
41 w(Shell)h(B:)h(source)e(en)n(vironmen)n(t-setup-i586-p)r(oky-lin)n
(ux)p 0 TeXcolorgray 210 2697 a(12.)p 0 TeXcolorgray
41 w(Shell)h(B:)h($GDB)p 0 TeXcolorgray 210 2863 a(13.)p
0 TeXcolorgray 41 w(Shell)f(B:)h(T)-7 b(arget)26 b(remote)h(:5514,)f
(then)i(en)n(ter)f(con)n(tin)n(ue)h(and)f(hit)h(en)n(ter)p
0 TeXcolorgray 210 3029 a(14.)p 0 TeXcolorgray 41 w(Shell)f(A:)i(en)n
(ter)e(ro)r(ot)f(and)i(hit)g(en)n(ter.)36 b(En)n(ter)27
b(reb)r(o)r(ot)g(and)h(hit)g(en)n(ter)f(when)h(ready)e(to)i(quit)p
0 TeXcolorgray 210 3195 a(15.)p 0 TeXcolorgray 41 w(Hey)f(it)h(w)n(ork)
n(ed!)35 b(No)n(w)28 b(to)f(mak)n(e)g(our)g(o)n(wn)p
0 TeXcolorgray 210 3361 a(16.)p 0 TeXcolorgray 41 w(Mv)g
(con\014g-3.19.2-y)n(o)r(cto-standard)22 b(.con\014g)p
0 TeXcolorgray 210 3527 a(17.)p 0 TeXcolorgray 41 w(Mak)n(e)k(-j4)h
(all)p 0 TeXcolorgray 210 3693 a(18.)p 0 TeXcolorgray
41 w(En)n(ter)f(in)i(mak)n(e)f(men)n(ucon\014g)p 0 TeXcolorgray
210 3859 a(19.)p 0 TeXcolorgray 41 w(Go)g(to)g(general)g(and)g(c)n
(hange)f(the)i(k)n(ernel)f(info)h(to)f(group)g(14)f(homew)n(ork)g(1)p
0 TeXcolorgray 210 4025 a(20.)p 0 TeXcolorgray 41 w(Find)i(bzImage)f
(in)g(the)h(folder)g(arc)n(h/x86/b)r(o)r(ot/bzImage)p
0 TeXcolorgray 210 4191 a(21.)p 0 TeXcolorgray 41 w(Cp)f(arc)n(h/x86/b)
r(o)r(ot/bzImage)c(/scratc)n(h/fall2017/14/lin)n(ux-y)m(o)r(cto-)o(3.1)
o(9.2)p 0 TeXcolorgray 210 4357 a(22.)p 0 TeXcolorgray
41 w(Shell)k(A:)i(source)d(en)n(vironmen)n(t-setup-i586-p)r(oky-lin)n
(ux)p 0 TeXcolorgray 210 4523 a(23.)p 0 TeXcolorgray
41 w(Shell)20 b(A:)g(qem)n(u-system-i386)e(-gdb)h(tcp::5514)g(-S)h
(-nographic)e(-k)n(ernel)h(bzImage)g(-driv)n(e)g(\014le=core-image-)358
4623 y(lsb-sdk-qem)n(ux86.ext4,if=virtio)14 b(-enable-kvm)k(-net)g
(none)g(-usb)g(-lo)r(caltime)g({no-reb)r(o)r(ot)f({app)r(end)h("ro)r
(ot=/dev/vda)358 4722 y(rw)27 b(console=tt)n(yS0)e(debug".)p
0 TeXcolorgray 210 4888 a(24.)p 0 TeXcolorgray 41 w(Shell)i(B:)h
(source)e(en)n(vironmen)n(t-setup-i586-p)r(oky-lin)n(ux)p
0 TeXcolorgray 210 5054 a(25.)p 0 TeXcolorgray 41 w(Shell)h(B:)h($GDB)p
0 TeXcolorgray 1929 5349 a(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 210 83 a Fa(26.)p 0 TeXcolorgray
41 w(Shell)27 b(B:)h(T)-7 b(arget)26 b(remote)h(:5514)p
0 TeXcolorgray 210 249 a(27.)p 0 TeXcolorgray 41 w(Shell)g(B:)h(Con)n
(tin)n(ue)p 0 TeXcolorgray 210 415 a(28.)p 0 TeXcolorgray
41 w(Shell)f(A:)i(Ro)r(ot)p 0 TeXcolorgray 210 581 a(29.)p
0 TeXcolorgray 41 w(Logged)d(in)n(to)h(VM)h(and)g(ready)e(to)i(go)p
0 TeXcolorgray 210 747 a(30.)p 0 TeXcolorgray 41 w(Uname)f(-a)g(prin)n
(ts)g(out)h(our)f(group)f(n)n(um)n(b)r(er)i(14,)e(homew)n(ork)g(1)150
1032 y Fb(iqem)m(u)31 b(\015ags)p 0 TeXcolorgray 251
1318 a Fa(1.)p 0 TeXcolorgray 42 w(-gdb)c(tcp::5514)p
0 TeXcolorgray 393 1484 a(\(a\))p 0 TeXcolorgray 41 w(This)h(op)r(ens)f
(a)g(gdbserv)n(er)f(on)h(TCP)g(p)r(ort)h(5514.)p 0 TeXcolorgray
251 1650 a(2.)p 0 TeXcolorgray 42 w(-S)p 0 TeXcolorgray
393 1816 a(\(a\))p 0 TeXcolorgray 41 w(This)g(means)f(Do)h(not)f(start)
g(CPU)h(at)f(startup.)p 0 TeXcolorgray 251 1981 a(3.)p
0 TeXcolorgray 42 w(-nographic)p 0 TeXcolorgray 393 2147
a(\(a\))p 0 TeXcolorgray 41 w(Disables)g(graphical)f(output)j(so)e
(that)g(Qem)n(u)h(is)f(a)g(simple)h(command)f(line)h(application.)p
0 TeXcolorgray 251 2313 a(4.)p 0 TeXcolorgray 42 w(-k)n(ernel)e
(bzImage)p 0 TeXcolorgray 393 2479 a(\(a\))p 0 TeXcolorgray
41 w(This)i(command)g(sa)n(ys)f(to)h(use)g(the)g(bzImage)f(as)h(the)g
(k)n(ernel)g(image,)f(whic)n(h)h(can)g(either)g(b)r(e)g(a)g(lin)n(ux)
540 2579 y(k)n(ernel)f(or)g(in)g(m)n(ultib)r(o)r(ot)i(format.)p
0 TeXcolorgray 251 2745 a(5.)p 0 TeXcolorgray 42 w(-driv)n(e)p
0 TeXcolorgray 393 2910 a(\(a\))p 0 TeXcolorgray 41 w
(\014le=core-image-lsb-sdk-qem)n(ux86.ext)p 0 TeXcolorgray
608 3043 a(i.)p 0 TeXcolorgray 41 w(This)i(option)g(de\014nes)f(whic)n
(h)h(disk)g(image)f(to)g(use)h(with)g(this)g(driv)n(e.)46
b(F)-7 b(or)30 b(this)h(situation,)h(the)695 3143 y(disk)c(image)f(w)n
(ould)g(b)r(e)h(core-image-lsb-sdk-qem)n(ux86.ext)p 0
TeXcolorgray 388 3275 a(\(b\))p 0 TeXcolorgray 42 w(if=virtio)p
0 TeXcolorgray 608 3408 a(i.)p 0 TeXcolorgray 41 w(This)g(option)f
(de\014nes)h(on)f(whic)n(h)h(t)n(yp)r(e)g(of)f(in)n(terface)g(is)h
(connected.)p 0 TeXcolorgray 251 3574 a(6.)p 0 TeXcolorgray
42 w(-enable-kvm)p 0 TeXcolorgray 393 3740 a(\(a\))p
0 TeXcolorgray 41 w(Enable)d(KVM)h(full)g(virtualization)f(supp)r(ort.)
36 b(This)26 b(option)f(is)h(only)f(a)n(v)-5 b(ailable)25
b(if)h(KVM)g(supp)r(ort)f(is)540 3839 y(enabled)j(when)f(compiling)p
0 TeXcolorgray 251 4005 a(7.)p 0 TeXcolorgray 42 w(-net-none)p
0 TeXcolorgray 393 4171 a(\(a\))p 0 TeXcolorgray 41 w(Indicate)h(that)h
(no)f(net)n(w)n(ork)e(devices)i(should)g(b)r(e)g(con\014gured.)38
b(It)28 b(is)g(used)g(to)g(o)n(v)n(erride)e(the)j(default)540
4271 y(con\014guration)d(whic)n(h)i(is)f(activ)-5 b(ated)28
b(if)g(no)f(-net)h(options)f(are)f(pro)n(vided)p 0 TeXcolorgray
251 4437 a(8.)p 0 TeXcolorgray 42 w(-usb)p 0 TeXcolorgray
393 4602 a(\(a\))p 0 TeXcolorgray 41 w(Simply)i(enables)f(the)h(USB)g
(driv)n(er)p 0 TeXcolorgray 251 4768 a(9.)p 0 TeXcolorgray
42 w(-lo)r(catime)p 0 TeXcolorgray 393 4934 a(\(a\))p
0 TeXcolorgray 41 w(This)g(is)f(used)h(to)f(let)h(the)g(R)-7
b(TC)28 b(start)f(at)g(the)h(curren)n(t)f(lo)r(cal)g(time)p
0 TeXcolorgray 210 5100 a(10.)p 0 TeXcolorgray 41 w({no-reb)r(o)r(ot)p
0 TeXcolorgray 1929 5349 a(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 393 83 a Fa(\(a\))p 0 TeXcolorgray
41 w(Exit)28 b(instead)f(of)h(reb)r(o)r(oting)p 0 TeXcolorgray
210 249 a(11.)p 0 TeXcolorgray 41 w({app)r(end)f(ro)r(ot=/dev/vda)e(rw)
i(console=tt)n(yS0)f(debug)p 0 TeXcolorgray 393 415 a(\(a\))p
0 TeXcolorgray 41 w(This)i(uses)f(ro)r(ot=/dev/vda)e(rw)i(console=tt)n
(yS0)f(debug)h(as)g(the)h(k)n(ernel)f(command)g(line)150
701 y Fb(Concurrency)33 b(Questions:)p 0 TeXcolorgray
251 987 a Fa(1.)p 0 TeXcolorgray 42 w(The)21 b(p)r(oin)n(t)h(of)g(this)
g(assignmen)n(t)f(has)g(b)r(een)h(to)f(implemen)n(t)i(a)e(m)n
(ultithreaded)h(solution)f(in)h(order)e(to)i(b)r(etter)358
1087 y(understand)g(parallel)g(programming.)34 b(In)23
b(addition,)h(it)f(has)g(help)r(ed)h(to)f(familiarize)f(the)i(class)e
(with)h(using)358 1186 y(the)28 b(rdrand)e(functionalit)n(y)i(on)f(in)n
(tel)h(CPUs)f(to)g(pro)r(duce)h(true)f(random)g(n)n(um)n(b)r(ers.)p
0 TeXcolorgray 251 1352 a(2.)p 0 TeXcolorgray 42 w(I)32
b(approac)n(hed)e(the)j(problem)e(b)n(y)h(dividing)g(up)h(the)f
(functionalit)n(y)g(of)g(the)h(t)n(w)n(o)e(thread)h(t)n(yp)r(es)g(in)n
(to)g(t)n(w)n(o)358 1452 y(di\013eren)n(t)g(functions.)51
b(I)33 b(implemen)n(ted)g(new)f(co)r(de)g(in)h(w)n(a)n(v)n(es.)49
b(First)32 b(w)n(as)g(the)g(threading,)h(then)g(m)n(utex)358
1552 y(lo)r(c)n(king,)j(semaphore)d(blo)r(c)n(king,)k(etc.)59
b(A)n(t)35 b(eac)n(h)g(step,)i(I)e(tested)g(to)g(mak)n(e)g(sure)f(that)
h(the)h(la)n(y)n(ers)d(w)n(ere)358 1651 y(correctly)25
b(co)r(ded.)37 b(The)27 b(algorithm)f(w)n(as)h(simple.)37
b(Eac)n(h)26 b(function)h(that)h(the)g(threads)e(w)n(ork)n(ed)g(con)n
(tained)358 1751 y(an)j(in\014nite)h(while)f(lo)r(op)g(that)h(c)n(hec)n
(k)n(ed)e(for)h(the)h(lo)r(c)n(k)f(a)n(v)-5 b(ailabilit)n(y)28
b(and)h(did)h(w)n(ork)e(based)h(on)g(the)g(v)-5 b(alues)358
1851 y(detected)26 b(in)g(the)g(global)e(v)-5 b(ariables.)35
b(If)26 b(the)g(bu\013er)g(w)n(as)f(empt)n(y)h(or)e(full,)j(the)f
(while)g(lo)r(op)f(con)n(tained)g(co)r(de)358 1950 y(to)h(do)f(the)i
(appropriate)d(blo)r(c)n(king.)36 b(When)26 b(running)g(the)h(co)r(de,)
f(users)f(en)n(ter)h(the)g(n)n(um)n(b)r(er)g(of)g(consumers)358
2050 y(and)h(pro)r(ducers.)36 b(This)27 b(mak)n(es)g(our)g(solution)g
(a)g(m)n(ultiple)h(consumer)f(and)g(pro)r(ducer)g(solution.)p
0 TeXcolorgray 251 2216 a(3.)p 0 TeXcolorgray 42 w(T)-7
b(o)26 b(ensure)g(the)h(correctness,)e(b)r(oth)i(m)n(yself)f(and)h(m)n
(y)f(partner)g(tested)h(the)g(co)r(de)f(at)h(eac)n(h)f(stage)f(of)i
(dev)n(el-)358 2316 y(opmen)n(t.)38 b(T)-7 b(o)28 b(b)r(e)g(able)g(to)g
(see)g(the)h(correctness,)d(the)j(program)d(is)i(littered)g(with)h
(prin)n(t)f(statemen)n(ts)g(that)358 2415 y(rep)r(ort)f(what)g(is)h
(going)f(on)g(for)g(eac)n(h)g(thread.)37 b(These)28 b(prin)n(t)g
(statemen)n(ts)f(rep)r(ort)g(the)h(curren)n(tly)f(handled)358
2515 y(item)h(n)n(um)n(b)r(er,)f(the)h(time)g(sp)r(en)n(t)g(w)n(orking)
e(on)h(it,)h(and)g(the)g(curren)n(t)e(bu\013er)i(con)n(ten)n(ts.)p
0 TeXcolorgray 251 2681 a(4.)p 0 TeXcolorgray 42 w(Most)j(of)h(what)g
(w)n(e)f(learned)g(in)n(v)n(olv)n(ed)g(just)h(relearning)e(things)i
(from)g(OS1)f(lik)n(e)g(ho)n(w)h(to)f(m)n(ulti-thread,)358
2780 y(m)n(utex)i(lo)r(c)n(k,)h(and)f(using)g(semaphores.)52
b(The)33 b(new)g(con)n(ten)n(t)g(w)n(as)f(primarily)g(ho)n(w)h(to)g
(use)g(the)h(Twister)358 2880 y(n)n(um)n(b)r(er)28 b(generator)e(and)i
(the)g(rdrand)g(assem)n(bly)f(co)r(de.)39 b(The)28 b(assem)n(bly)f(co)r
(de)h(pro)n(v)n(ed)f(to)h(b)r(e)h(somewhat)358 2980 y(of)e(a)g(c)n
(hallenge)g(when)h(implemen)n(ting)f(in)h(C,)g(but)g(it)g(w)n(as)f(go)r
(o)r(d)g(to)g(learn.)150 3266 y Fb(W)-8 b(ork.log)31
b(for)h(Chase)f(Coltman)p 0 TeXcolorgray 251 3552 a Fa(1.)p
0 TeXcolorgray 42 w(Began)21 b(w)n(orking)g(on)i(installing)f(Kernel)g
(and)h(attempting)g(to)g(get)f(it)h(run.)36 b(W)-7 b(ork)n(ed)21
b(through)i(instructions)358 3651 y(un)n(til)28 b(I)f(got)g(to)p
0 TeXcolorgray 393 3817 a(\(a\))p 0 TeXcolorgray 41 w(Steps)h(T)-7
b(ak)n(en:)p 0 TeXcolorgray 608 3950 a(i.)p 0 TeXcolorgray
41 w(Created)24 b(the)g(rep)r(o)f(and)h(ga)n(v)n(e)e(p)r(ermissions)g
(for)i(Alec)g(to)f(b)r(e)i(able)e(to)h(en)n(ter)f(and)h(mak)n(e)e(c)n
(hanges)p 0 TeXcolorgray 585 4067 a(ii.)p 0 TeXcolorgray
41 w(A)n(ttempted)29 b(to)f(mo)n(v)n(e)e(\014les)i(to)f(the)h(correct)e
(lo)r(cation)p 0 TeXcolorgray 388 4199 a(\(b\))p 0 TeXcolorgray
42 w(Date)i(-)f(9/30/2017)p 0 TeXcolorgray 397 4332 a(\(c\))p
0 TeXcolorgray 42 w(Time)h(-)f(Ab)r(out)i(2)e(hours)p
0 TeXcolorgray 388 4465 a(\(d\))p 0 TeXcolorgray 42 w(End-p)r(oin)n(t)g
(-)h(F)-7 b(rustrated)27 b(and)g(not)h(sure)f(what)g(I)h(am)f(doing)g
(wrong)p 0 TeXcolorgray 397 4598 a(\(e\))p 0 TeXcolorgray
42 w(Finished)h(-)g(No,)f(the)h(Kernel)f(had)g(a)g(bunc)n(h)h(of)g
(error)d(so)i(I)h(w)n(aited)f(un)n(til)h(next)g(class)f(to)g(ask)g(a)g
(p)r(eer)p 0 TeXcolorgray 251 4764 a(2.)p 0 TeXcolorgray
42 w(A)n(ttempted)h(to)g(w)n(ork)e(some)h(more)g(on)g(getting)g(Kernel)
g(to)h(w)n(ork)p 0 TeXcolorgray 393 4930 a(\(a\))p 0
TeXcolorgray 41 w(Steps)g(T)-7 b(ak)n(en:)p 0 TeXcolorgray
608 5063 a(i.)p 0 TeXcolorgray 41 w(Mo)n(v)n(ed)27 b(all)g(the)h
(\014les)g(in)n(to)f(the)h(correct)e(directory)p 0 TeXcolorgray
1929 5349 a(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 585 83 a Fa(ii.)p 0 TeXcolorgray
41 w(Seems)28 b(to)f(b)r(e)h(w)n(orking)e(but)j(not)e(sure)g(as)g(it)h
(freezes)f(when)h(I)f(run)h(the)g(co)r(de)p 0 TeXcolorgray
388 215 a(\(b\))p 0 TeXcolorgray 42 w(Date)g(-)f(10/3/2017)p
0 TeXcolorgray 397 347 a(\(c\))p 0 TeXcolorgray 42 w(Time)h(-)f(Ab)r
(out)i(2)e(hours)p 0 TeXcolorgray 388 478 a(\(d\))p 0
TeXcolorgray 42 w(End-p)r(oin)n(t)g(-)h(Compiles)f(and)g(runs)h(but)g
(freezes)f(at)g(the)h(end)p 0 TeXcolorgray 397 610 a(\(e\))p
0 TeXcolorgray 42 w(Finished)g(-)g(No,)f(Kernel)g(is)g(compiling)h(but)
g(not)f(sure)g(on)h(next)f(step)p 0 TeXcolorgray 251
775 a(3.)p 0 TeXcolorgray 42 w(Completed)g(all)h(the)g(requiremen)n(ts)
e(for)h(the)h(Kernel)f(to)g(run)p 0 TeXcolorgray 393
940 a(\(a\))p 0 TeXcolorgray 41 w(Steps)h(T)-7 b(ak)n(en:)p
0 TeXcolorgray 608 1072 a(i.)p 0 TeXcolorgray 41 w(Finally)22
b(got)f(it)i(w)n(orking.)33 b(Ev)n(erything)20 b(w)n(as)h(actually)g(w)
n(orking)f(on)h(the)i(3rd)e(when)h(I)f(attempted)695
1172 y(to)28 b(do)f(it)h(b)r(efore,)g(just)g(had)f(to)h(op)r(en)f
(another)g(shell)h(clien)n(t.)p 0 TeXcolorgray 585 1287
a(ii.)p 0 TeXcolorgray 41 w(Finished)k(the)f(implemen)n(tation)g(and)g
(did)g(the)h(write-up)e(with)i(all)e(the)i(steps)f(that)g(I)g(to)r(ok)f
(to)695 1387 y(\014gure)d(it)h(out)p 0 TeXcolorgray 388
1519 a(\(b\))p 0 TeXcolorgray 42 w(Date)g(-)f(10/5/2017)p
0 TeXcolorgray 397 1651 a(\(c\))p 0 TeXcolorgray 42 w(Time)h(-)f(Ab)r
(out)i(3-4)d(hours)p 0 TeXcolorgray 388 1783 a(\(d\))p
0 TeXcolorgray 42 w(End-p)r(oin)n(t)j(-)g(Runs)g(and)g(I)g(am)f(able)h
(to)g(en)n(ter)g(the)g(k)n(ernel)f(and)h(VM)g(with)h(b)r(oth)f(the)h
(bzImage)e(\014le)540 1882 y(and)g(the)g(one)f(w)n(e)g(mak)n(e)g(when)h
(w)n(e)f(run)g(mak)n(e)g(-j4)g(all)p 0 TeXcolorgray 397
2014 a(\(e\))p 0 TeXcolorgray 42 w(Finished)h(-)g(Y)-7
b(es,)27 b(It)h(w)n(ork)n(ed)e(and)i(I)f(follo)n(w)n(ed)g(all)g(the)h
(steps)g(to)f(mak)n(e)g(sure)p 0 TeXcolorgray 251 2179
a(4.)p 0 TeXcolorgray 42 w(Finished)h(writing)f(up)h(what)f(all)h(the)g
(\015ags)e(do)p 0 TeXcolorgray 393 2344 a(\(a\))p 0 TeXcolorgray
41 w(Steps)i(T)-7 b(ak)n(en:)p 0 TeXcolorgray 608 2476
a(i.)p 0 TeXcolorgray 41 w(Go)r(ogled)27 b(qem)n(u)h(i386)e(\015ags)g
(to)i(giv)n(e)f(me)g(a)h(detailed)f(readme)p 0 TeXcolorgray
585 2592 a(ii.)p 0 TeXcolorgray 41 w(F)-7 b(ound)43 b(this)f(link:)66
b(h)n(ttp://www.tin.org/bin/man.cgi?section=1&topic=qem)n(u-system-)695
2691 y(i386)p 0 TeXcolorgray 562 2807 a(iii.)p 0 TeXcolorgray
41 w(W)-7 b(rote)28 b(in)h(what)f(eac)n(h)f(\015ag)g(did)i(and)e
(learned)h(what)g(exactly)f(w)n(e)h(do)g(when)g(w)n(e)g(run)f(that)i
(long)695 2906 y(command)p 0 TeXcolorgray 388 3038 a(\(b\))p
0 TeXcolorgray 42 w(Date)f(-)f(10/7/2017)p 0 TeXcolorgray
397 3170 a(\(c\))p 0 TeXcolorgray 42 w(Time)h(-)f(Ab)r(out)i(1)e(hour)p
0 TeXcolorgray 388 3302 a(\(d\))p 0 TeXcolorgray 42 w(End-p)r(oin)n(t)g
(-)h(Finished)p 0 TeXcolorgray 397 3434 a(\(e\))p 0 TeXcolorgray
42 w(Finished)33 b(-)e(Y)-7 b(es,)33 b(Reason)e(for)h(it)g(b)r(eing)g
(appro)n(ximately)e(a)h(time)i(is)f(b)r(ecause)f(I)h(w)n(as)f(at)h(w)n
(ork)e(and)540 3533 y(actually)d(ha)n(v)n(e)g(no)g(idea)g(ho)n(w)g
(long)g(it)h(to)r(ok)p 0 TeXcolorgray 251 3698 a(5.)p
0 TeXcolorgray 42 w(Learning)e(ho)n(w)h(to)g(LaT)-7 b(eX)p
0 TeXcolorgray 393 3863 a(\(a\))p 0 TeXcolorgray 41 w(Steps)28
b(T)-7 b(ak)n(en:)p 0 TeXcolorgray 608 3995 a(i.)p 0
TeXcolorgray 41 w(W)g(atc)n(hed)28 b(the)g(online)g(tutorial)p
0 TeXcolorgray 585 4111 a(ii.)p 0 TeXcolorgray 41 w(Cop)n(y-pasted)f
(write)g(up)h(from)f(Go)r(ogle)g(Do)r(c)h(and)f(formatted)g(for)g(LaT)
-7 b(eX)p 0 TeXcolorgray 388 4243 a(\(b\))p 0 TeXcolorgray
42 w(Date)28 b(-)f(10/9/2017)p 0 TeXcolorgray 397 4375
a(\(c\))p 0 TeXcolorgray 42 w(Time)h(-)f(Ab)r(out)i(2)e(hours)p
0 TeXcolorgray 388 4506 a(\(d\))p 0 TeXcolorgray 42 w(End-p)r(oin)n(t)g
(-)h(Finished)g(on)f(m)n(y)g(end,)h(sending)g(to)f(Alec)h(for)f(his)h
(log)e(and)i(\014nal)f(pro)r(duct)p 0 TeXcolorgray 397
4638 a(\(e\))p 0 TeXcolorgray 42 w(Finished)h(-)g(No)358
4803 y Fb(W)-8 b(ork.log)30 b(for)i(Alec)g(Zitzelb)s(erger)p
0 TeXcolorgray 393 4968 a Fa(\(a\))p 0 TeXcolorgray 41
w(Began)27 b(w)n(orking)f(on)h(the)h(Concurrency)e(Solution)p
0 TeXcolorgray 608 5100 a(i.)p 0 TeXcolorgray 41 w(Steps)i(T)-7
b(ak)n(en:)p 0 TeXcolorgray 1929 5349 a(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 709 83 a Fa(A.)p 0 TeXcolorgray
43 w(Researc)n(hed)26 b(ho)n(w)h(to)g(use)h(pthreading)f(and)g(m)n
(utexes)g(in)h(C)p 0 TeXcolorgray 713 198 a(B.)p 0 TeXcolorgray
42 w(Used)g(the)h(hellopthread.c)f(co)r(de)g(as)g(a)g(baseline)g(for)g
(dev)n(elopmen)n(t)g(as)g(it)h(con)n(tained)f(a)g(lot)837
298 y(of)f(syn)n(tax)g(info)p 0 TeXcolorgray 585 412
a(ii.)p 0 TeXcolorgray 41 w(Date)h(-)g(10/5/2017)p 0
TeXcolorgray 562 527 a(iii.)p 0 TeXcolorgray 41 w(Time)g(-)g(Ab)r(out)g
(2)f(hours)p 0 TeXcolorgray 564 642 a(iv.)p 0 TeXcolorgray
41 w(End-p)r(oin)n(t)19 b(-)f(Had)h(a)f(decen)n(t)h(understanding)f(of)
h(the)g(co)r(de)f(libraries)g(I)g(w)n(ould)h(need)g(for)f(pthread-)695
742 y(ing)p 0 TeXcolorgray 587 857 a(v.)p 0 TeXcolorgray
41 w(Finished)28 b(-)g(No,)f(This)h(w)n(ould)f(tak)n(e)g(more)g(time)h
(to)f(create)g(the)h(\014rst)f(alpha)p 0 TeXcolorgray
388 987 a(\(b\))p 0 TeXcolorgray 42 w(Finished)h(w)n(orking)e(on)h(the)
h(\014rst)g(v)n(ersion)e(of)h(the)h(Concurrency)e(Solution)i(co)r(de)p
0 TeXcolorgray 608 1117 a(i.)p 0 TeXcolorgray 41 w(Steps)g(T)-7
b(ak)n(en:)p 0 TeXcolorgray 710 1232 a(A.)p 0 TeXcolorgray
42 w(Con)n(tin)n(ued)27 b(to)g(implemen)n(t)i(what)e(I)h(had)f(learned)
g(during)g(m)n(y)g(researc)n(h)p 0 TeXcolorgray 713 1347
a(B.)p 0 TeXcolorgray 42 w(Finished)h(writing)f(the)h(co)r(de)f(for)g
(simple)h(pthreading)f(b)r(eha)n(vior)f(and)i(tested)g(it)g(lo)r(cally)
p 0 TeXcolorgray 712 1462 a(C.)p 0 TeXcolorgray 42 w(Pushed)f(the)h(V1)
f(to)h(the)g(MAIN)g(rep)r(o)p 0 TeXcolorgray 585 1577
a(ii.)p 0 TeXcolorgray 41 w(Date)g(-)g(10/6/2017)p 0
TeXcolorgray 562 1692 a(iii.)p 0 TeXcolorgray 41 w(Time)g(-)g(Ab)r(out)
g(1)f(hours)p 0 TeXcolorgray 564 1806 a(iv.)p 0 TeXcolorgray
41 w(End-p)r(oin)n(t)h(-)f(Had)h(a)f(basic)g(v)n(ersion)f(that)i(c)n
(haotically)e(did)i(w)n(ork)e(in)i(m)n(ultiple)g(threads)p
0 TeXcolorgray 587 1921 a(v.)p 0 TeXcolorgray 41 w(Finished)g(-)g(Y)-7
b(es,)28 b(completed)f(the)h(w)n(ork)e(phase)h(I)h(had)g(b)r(egun)f
(the)h(da)n(y)f(b)r(efore)p 0 TeXcolorgray 397 2052 a(\(c\))p
0 TeXcolorgray 42 w(W)-7 b(ork)n(ed)27 b(on)g(the)h(second)f(v)n
(ersion)f(of)i(the)g(Concurrency)e(Solution)h(co)r(de)p
0 TeXcolorgray 608 2182 a(i.)p 0 TeXcolorgray 41 w(Steps)h(T)-7
b(ak)n(en:)p 0 TeXcolorgray 710 2297 a(A.)p 0 TeXcolorgray
42 w(Implemen)n(ted)28 b(m)n(utex)f(lo)r(c)n(king)p 0
TeXcolorgray 713 2412 a(B.)p 0 TeXcolorgray 42 w(T)-7
b(ested)27 b(the)h(co)r(de)g(that)g(no)n(w)f(lo)r(c)n(k)n(ed)f(the)i
(threads)f(correctly)p 0 TeXcolorgray 712 2526 a(C.)p
0 TeXcolorgray 42 w(Pushed)g(V2)g(to)h(the)g(MAIN)g(rep)r(o)p
0 TeXcolorgray 585 2641 a(ii.)p 0 TeXcolorgray 41 w(Date)g(-)g
(10/6/2017)p 0 TeXcolorgray 562 2756 a(iii.)p 0 TeXcolorgray
41 w(Time)g(-)g(Ab)r(out)g(1)f(hours)p 0 TeXcolorgray
564 2871 a(iv.)p 0 TeXcolorgray 41 w(End-p)r(oin)n(t)h(-)f(Had)h(co)r
(de)f(that)h(follo)n(w)n(ed)e(the)i(lo)r(c)n(king)f(criteria)f(of)i
(the)g(solution)p 0 TeXcolorgray 587 2986 a(v.)p 0 TeXcolorgray
41 w(Finished)g(-)g(Y)-7 b(es,)28 b(completed)f(the)h(phase)f(of)h(co)r
(ding)f(m)n(utexes)p 0 TeXcolorgray 388 3116 a(\(d\))p
0 TeXcolorgray 42 w(W)-7 b(ork)n(ed)27 b(on)g(the)h(third)g(v)n(ersion)
e(of)i(the)g(Concurrency)e(Solution)h(co)r(de)p 0 TeXcolorgray
608 3246 a(i.)p 0 TeXcolorgray 41 w(Steps)h(T)-7 b(ak)n(en:)p
0 TeXcolorgray 710 3361 a(A.)p 0 TeXcolorgray 42 w(Researc)n(hed)26
b(semaphore)g(signalling)g(for)h(C)h(co)r(de)p 0 TeXcolorgray
713 3476 a(B.)p 0 TeXcolorgray 42 w(Implemen)n(ted)g(semaphore)e(blo)r
(c)n(king)p 0 TeXcolorgray 712 3591 a(C.)p 0 TeXcolorgray
42 w(T)-7 b(ested)35 b(the)h(co)r(de)g(that)g(no)n(w)f(blo)r(c)n(k)n
(ed)g(the)h(threads)f(correctly)f(giv)n(en)h(the)h(state)f(of)h(the)837
3691 y(bu\013er)p 0 TeXcolorgray 708 3806 a(D.)p 0 TeXcolorgray
43 w(Pushed)27 b(V3)g(to)h(the)g(MAIN)g(rep)r(o)p 0 TeXcolorgray
585 3920 a(ii.)p 0 TeXcolorgray 41 w(Date)g(-)g(10/6/2017)p
0 TeXcolorgray 562 4035 a(iii.)p 0 TeXcolorgray 41 w(Time)g(-)g(Ab)r
(out)g(1)f(hours)p 0 TeXcolorgray 564 4150 a(iv.)p 0
TeXcolorgray 41 w(End-p)r(oin)n(t)h(-)f(Had)h(co)r(de)f(that)h(follo)n
(w)n(ed)e(the)i(blo)r(c)n(king)f(criteria)g(of)g(the)h(solution)p
0 TeXcolorgray 587 4265 a(v.)p 0 TeXcolorgray 41 w(Finished)g(-)g(Y)-7
b(es,)28 b(completed)f(the)h(phase)f(of)h(co)r(ding)f(conditional)g
(thread)g(blo)r(c)n(king)p 0 TeXcolorgray 397 4395 a(\(e\))p
0 TeXcolorgray 42 w(W)-7 b(ork)n(ed)27 b(on)g(the)h(fourth)g(v)n
(ersion)e(of)h(the)h(Concurrency)e(Solution)i(co)r(de)p
0 TeXcolorgray 608 4526 a(i.)p 0 TeXcolorgray 41 w(Steps)g(T)-7
b(ak)n(en:)p 0 TeXcolorgray 710 4640 a(A.)p 0 TeXcolorgray
42 w(Researc)n(hed)23 b(rdrand)i(and)g(Mersenne)g(Twister)g(random)f(n)
n(um)n(b)r(er)h(generation)f(for)h(C)g(co)r(de)p 0 TeXcolorgray
713 4755 a(B.)p 0 TeXcolorgray 42 w(Implemen)n(ted)j(random)e(n)n(um)n
(b)r(er)i(generation)p 0 TeXcolorgray 712 4870 a(C.)p
0 TeXcolorgray 42 w(T)-7 b(ested)27 b(the)h(co)r(de)g(that)g(no)n(w)f
(generated)f(random)h(n)n(um)n(b)r(ers)g(lo)r(cally)p
0 TeXcolorgray 708 4985 a(D.)p 0 TeXcolorgray 43 w(Pushed)g(V4)g(to)h
(the)g(MAIN)g(rep)r(o)p 0 TeXcolorgray 585 5100 a(ii.)p
0 TeXcolorgray 41 w(Date)g(-)g(10/8/2017)p 0 TeXcolorgray
1929 5349 a(5)p 0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray 0 TeXcolorgray 0 TeXcolorgray 1578 141 a
Fa(T)-7 b(able)27 b(1:)36 b(My)28 b(caption)p 0 TeXcolorgray
455 235 a(Date)564 b(Action)1742 b(V)-7 b(ersion)455
334 y(9:00)p 609 334 25 4 v 28 w(Oct)28 b(5,)f(2017)139
b(Created)27 b(Pro)5 b(ject)26 b(with)i(basic)f(threading)g(in)h(lo)r
(cal)f(rep)r(o.)129 b(V1)455 434 y(2:33)p 609 434 V 28
w(Oct)28 b(6,)f(2017)139 b(Pushed)27 b(Pro)5 b(ject)27
b(to)g(MAIN)h(rep)r(o.)855 b(V1)455 534 y(3:11)p 609
534 V 28 w(Oct)28 b(6,)f(2017)139 b(Added)28 b(m)n(utex)g(lo)r(c)n
(king)f(in)h(lo)r(cal)f(rep)r(o.)705 b(V2)455 633 y(3:16)p
609 633 V 28 w(Oct)28 b(6,)f(2017)139 b(Pushed)27 b(Pro)5
b(ject)27 b(to)g(MAIN)h(rep)r(o.)855 b(V2)455 733 y(4:35)p
609 733 V 28 w(Oct)28 b(6,)f(2017)139 b(Added)28 b(semaphore)f(blo)r(c)
n(king)f(in)i(lo)r(cal)f(rep)r(o.)502 b(V3)455 833 y(4:42)p
609 833 V 28 w(Oct)28 b(6,)f(2017)139 b(Pushed)27 b(Pro)5
b(ject)27 b(to)g(MAIN)h(rep)r(o.)855 b(V3)455 932 y(2:03)p
609 932 V 28 w(Oct)28 b(8,)f(2017)139 b(Added)28 b(rdrand)f(and)g
(Mersenne)g(in)h(lo)r(cal)f(rep)r(o.)437 b(V4)455 1032
y(5:24)p 609 1032 V 28 w(Oct)28 b(8,)f(2017)139 b(Pushed)27
b(Pro)5 b(ject)27 b(to)g(MAIN)h(rep)r(o.)855 b(V4)455
1182 y(10:02)p 651 1182 V 28 w(Oct)27 b(9,)g(2017)1193
1131 y(Replaced)g(semaphore)g(with)h(pthread)p 2437 1131
V 29 w(w)n(ait)f(conditionals)1193 1231 y(in)h(lo)r(cal)f(rep)r(o.)3177
1182 y(V5)455 1331 y(10:10)p 651 1331 V 28 w(Oct)g(9,)g(2017)98
b(Pushed)27 b(Pro)5 b(ject)27 b(to)g(MAIN)h(rep)r(o.)855
b(V5)p 0 TeXcolorgray 0 TeXcolorgray 562 1610 a(iii.)p
0 TeXcolorgray 41 w(Time)28 b(-)g(Ab)r(out)g(2)f(hours)p
0 TeXcolorgray 564 1726 a(iv.)p 0 TeXcolorgray 41 w(End-p)r(oin)n(t)h
(-)f(Had)h(co)r(de)f(that)h(follo)n(w)n(ed)e(the)i(random)f(n)n(um)n(b)
r(er)g(criteria)g(of)g(the)h(solution)p 0 TeXcolorgray
587 1842 a(v.)p 0 TeXcolorgray 41 w(Finished)g(-)g(Y)-7
b(es,)28 b(completed)f(the)h(phase)f(of)h(co)r(ding)f(random)g(n)n(um)n
(b)r(er)g(generation)p 0 TeXcolorgray 402 1975 a(\(f)6
b(\))p 0 TeXcolorgray 43 w(W)-7 b(ork)n(ed)27 b(on)g(the)h(\014fth)h(v)
n(ersion)d(of)h(the)h(Concurrency)e(Solution)i(co)r(de)p
0 TeXcolorgray 608 2108 a(i.)p 0 TeXcolorgray 41 w(Steps)g(T)-7
b(ak)n(en:)p 0 TeXcolorgray 710 2224 a(A.)p 0 TeXcolorgray
42 w(Researc)n(hed)26 b(pthread)h(w)n(ait)g(blo)r(c)n(king)g(for)g(C)h
(co)r(de)p 0 TeXcolorgray 713 2340 a(B.)p 0 TeXcolorgray
42 w(Implemen)n(ted)g(pthread)f(w)n(ait)g(blo)r(c)n(king)p
0 TeXcolorgray 712 2457 a(C.)p 0 TeXcolorgray 42 w(T)-7
b(ested)35 b(the)h(co)r(de)g(that)g(no)n(w)f(blo)r(c)n(k)n(ed)g(the)h
(threads)f(correctly)f(giv)n(en)h(the)h(state)f(of)h(the)837
2556 y(bu\013er)p 0 TeXcolorgray 708 2672 a(D.)p 0 TeXcolorgray
43 w(Pushed)27 b(V5)g(to)h(the)g(MAIN)g(rep)r(o)p 0 TeXcolorgray
585 2789 a(ii.)p 0 TeXcolorgray 41 w(Date)g(-)g(10/9/2017)p
0 TeXcolorgray 562 2905 a(iii.)p 0 TeXcolorgray 41 w(Time)g(-)g(Ab)r
(out)g(1)f(hours)p 0 TeXcolorgray 564 3021 a(iv.)p 0
TeXcolorgray 41 w(End-p)r(oin)n(t)h(-)f(Had)h(co)r(de)f(that)h(follo)n
(w)n(ed)e(the)i(blo)r(c)n(king)f(criteria)g(of)g(the)h(solution)p
0 TeXcolorgray 587 3137 a(v.)p 0 TeXcolorgray 41 w(Finished)g(-)g(Y)-7
b(es,)28 b(completed)f(the)h(phase)f(of)h(co)r(ding)f(conditional)g
(thread)g(blo)r(c)n(king)150 3423 y(textbfV)-7 b(ersion)28
b(Con)n(trol)e(T)-7 b(able)p 0 TeXcolorgray 1929 5349
a(6)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
